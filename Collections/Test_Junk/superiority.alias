<drac2>
c = character()
com = combat()
a = argparse(&ARGS&)
fail = 'fail' in &ARGS&
f=False
targ = a.last('t')
targets = a.get('t')
coms  = [com.get_combatant(x) for x in targets] if com else []
i = '-i' in &ARGS&
cc = "Superiority Dice"
m_bonus = max(int(wisdomMod), int(intelligenceMod), int(charismaMod), 0)
p_bonus = max(int(strengthMod), int(dexterityMod), int(constitutionMod),0)
g_bonus = max(m_bonus, p_bonus,0)
mi = a.last('mi')
gvar = load_json(get_gvar("662ecc7f-9b2e-4588-851d-12f199d27d0a"))
v = c.cc_exists(cc) or i
base = f'''embed -thumb {image} -color {color}'''
if v and not i:
    if not c.cc_exists(cc):
        return base + f'''-title "{name} has no custom counter {cc}!" '''
    elif not c.get_cc(cc):
        return base + f''' -title "{name} needs to take a rest to replenish their {cc}!" '''
if v:
    m = None
    output = None
    for g in gvar:
        if &ARGS&[0].lower() == g.name.lower():
            m=g
            break
    if m is None:
        return err("m is not found/supported")
    lvl = c.get_cc_max(cc)
    sd = "1d12" if lvl > 10 else "1d10" if lvl > 8 else "1d8" if lvl > 6 else "1d6" if lvl > 4 else "1d4"
    mod = m_bonus if m.sub == "Mental" else p_bonus if m.sub == "Physical" else g_bonus
    dc = 8 + proficiencyBonus + mod
    if m.type in ["Heal", "Damage", "Roll"]:
        roll_str = sd
        if mi:
            roll_str += f"mi{mi}"
        if m.apply_mod:
            roll_str += f"+ {mod}"
    if m.type=="Heal":
        output = vroll(roll_str)
        if len(coms) > 0:
            for combatant in coms:
                combatant.modify_hp(output.total, overflow=False)
                f=True
    elif m.type == "Damage":
        if m.save:
            if len(coms) > 0:
                output = f"{m.save} DC: {dc if not fail else '*auto-fail*'}\n"
                for com in coms:
                    save = com.save(m.save)
                    if save.total < dc or fail:
                        roll_result = com.damage(roll_str)
                        output += f"{com.name} {save} *Failed* \n {roll_result.damage}\n"
                        f=True
                    elif save.total >= dc:
                        output += f"{com.name} {save} **Success!**\n"
                    else:
                        output += f"**DC: ** {dc} \n **Damage: **{vroll(roll_str)}\n"
        else:
            roll_result = vroll(roll_str) if not tar else tar.damage(roll_str)
            output = f"**Damage: ** {roll_result if not tar else roll_result.damage}"
    elif m.type == "Roll":
        output = f"**Roll: **{vroll(roll_str)}\n"
    elif m.type == "Mod":
        output = f"**{m.sub} Modifier: **{mod}\n"
    if effect := m.effect:
        if len(coms) > 0:
            output += f"{m.save} DC: {dc if not fail else '*auto-fail*'}\n" if m.sub not in ["Heal", "Damage"] else ""
            for com in coms:
                if m.save:
                    if not save:
                        save = com.save(m.save)
                    if save.total < dc or fail:
                        for e in effect:
                            output += f"{tar.name} {save} *Failed*  - {e.name} added\n" if m.sub not in ["Heal", "Damage"] else f"{tar.name} - {e.name} added\n
                            com.add_effect(e.name, duration=e.duration, desc=e.description)
                else:
                    for e in effect:
                        output += f"{tar.name} - {e.name} added\n"
                        com.add_effect(e.name, duration=e.duration, desc=e.description)
    base += f''' -title "{name} uses a {cc} die to {m.name}" '''
    base += f''' -f "{m.name}|{m.description}" '''
    if output:
        base += f''' -f "Effect|{output}" '''
    if f:
        out_str = '\n'.join([f"{x.name}: {x.hp_str()}" for x in coms])
        base += f''' -footer "{out_str}"'''
    if not i:
        c.mod_cc(cc, -1)
        base += f''' -f "{cc}|{c.cc_str(cc)} (-1)" '''
    return base
</drac2>