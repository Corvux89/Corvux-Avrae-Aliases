# Ship core library/Module

ch = character()
com = combat()
bg = ch.background.split("|")
shipStats = load_json(ch.get_cvar("shipStats", {}))
hdSize = {"tiny": "d4", "small": "d6", "medium": "d8", "large": "d10", "huge": "d12", "gargantuan": "d20"}
remove_ieffect = {"type": "remove_ieffect"}


def get_ship():
    ship = [c for c in com.get_group(com.me.group).combatants if c.race.lower() in ['tiny', 'small', 'medium', 'large', 'huge', 'gargantuan']][0] if com else None
    return ship

def get_boost_engine_automation():
    effect = {"type": "ieffect2", "name": "Boost Engines!", "duration": 1, "desc": "Speed increased by 50"}

    check = {"type": "check", "ability": "athletics", "dc": 10,
             "success": [effect], "fail": []}
    target = {"type": "target", "target": "self", "effects": [check]}

    text = {"type": "text", "text": "You can attempt to boost your speed. When you take the Boost Engines action, "
                                    "you make a DC 10 Strength (Boost) check. On a success you increase your speed by "
                                    "50 until the end of your ship’s next turn."}

    return [target, text]


def get_boost_shield_automation():
    hds = hdSize.get(ch.race.lower())
    passRoll = {"type": "roll", "dice": f"1{hds}", "name": "shield_bonus", "displayName": "Shield Bonus"}

    thp = {"type": "temphp", "amount": "caster.temp_hp + shield_bonus"}

    check = {"type": "check", "ability": "athletics", "dc": 10,
             "success": [passRoll, thp], "fail": []}
    target = {"type": "target", "target": "self", "effects": [check]}

    text = {"type": "text", "text": "You can attempt to boost your shields. When you take the Boost Shields action, "
                                    "you make a DC 10 Strength (Boost) check. On a success, you roll a shield die, "
                                    "without expending it, and gain temporary shield points equal to the result that "
                                    "last until the start of your ship’s next turn."}

    return [target, text]


def get_boost_weapons_automation():
    check = {"type": "check", "ability": "athletics", "dc": 10,
             "success": [], "fail": []}
    target = {"type": "target", "target": "self", "effects": [check]}

    text = {"type": "text", "text": "You can attempt to boost your weapon output. When you take the Boost Weapons "
                                    "action, the next time this turn your ship would deal damage, "
                                    "you make a DC 10 Strength (Boost) check. On a success, "
                                    "you have advantage on the damage roll."}

    return [target, text]


def get_recharge_automation():
    rate = {"type": "roll", "dice": bg[1], "name": "rate", "displayName": "Regeneration Rate"}
    shields = {"type": "variable", "name": "shields", "value": f"min({bg[0]},caster.temp_hp+rate)"}
    thp = {"type": "temphp", "amount": "{shields}"}
    target = {"type": "target", "target": "self", "effects": [thp, get_sd_counter()]}
    text = {"type": "text", "text": "Your ship may regenerate shields (no action required) once per round on the "
                                    "ship’s turn by that value by expending a shield die without rolling it, up to "
                                    "the Shield Capacity. The shield regeneration rate is calculated by multiplying "
                                    "the maximum value of the ship’s Shield Die by the shield regeneration rate "
                                    "coefficient."}

    return [rate, shields, target, text]


def get_patch_automation():
    hds = hdSize.get(ch.race.lower())
    failRoll = {"type": "damage", "damage": f"-2{hds}kl1 [healing]"}
    passRoll = {"type": "damage", "damage": f"-1{hds} [healing]"}

    check = {"type": "check", "ability": "medicine", "dc": "max(10,floor((caster.max_hp-caster.hp)/2))",
             "success": [passRoll], "fail": [failRoll]}

    target = {"type": "target", "target": "self", "effects": [check, get_hd_counter()]}

    text = {"type": "text", "text": "You can attempt to patch up damage a ship has taken, using one of its Hull Dice. "
                                    "When you take the Patch action, you make a Constitution (Patch) check (DC = 10 or "
                                    "half the ship’s missing hull points, whichever number is higher). On a failure, "
                                    "you roll the Hull Die twice and take the lesser amount. On a success you roll "
                                    "the Hull Die normally. The Patch action can be taken multiple times on a "
                                    "ship’s turn."}

    return [target, text]

def get_hull_reduction_automation():
    dr = bg[2]
    damage = {"type": "damage", "damage": f"-{{min({dr},lastCounterRequestedAmount)}} [damage reduction]",
              "overheal": False}
    target = {"type": "target", "target": "self", "effects": [damage]}

    return [get_dummy_counter(dr), target]

def get_shield_reduction_automation():
    dr = bg[2]
    shields = {"type": "variable", "name": "shields",
               "value": f"min({bg[0]},caster.temp_hp+min({dr},lastCounterRequestedAmount))"}

    target = {"type": "target", "target": "self", "effects": [shields]}

    return [get_dummy_counter(dr), target]

def get_attack_run_automation():
    attack_run_var = {"type": "variable", "name": "runvar", "value": "round(lastcounterRequestedAmount/5)"}
    fire_effect = {"type": "ieffect2", "name": "Attack Run - Fire!", "desc": ""}
    return [get_dummy_counter(150)]

def get_hd_counter(amt=1):
    return {"type": "counter", "counter": shipStats.get('hdName'), "amount": amt, "errorBehaviour": "raise"}

def get_sd_counter(amt=1):
    return {"type": "counter", "counter": shipStats.get('sdName'), "amount": amt, "errorBehaviour": "raise"}


def get_dummy_counter(amt=1):
    return {"type": "counter", "counter": "inevershouldexist", "amount": amt, "errorBehaviour": "ignore"}

def shipEquip():
    if len(ch.background.split("|")) < 3:
        return err("Current character is not a ship")
    elif not shipStats.get('equip'):
        return []

    shipStats['equip'] = 0
    ch.set_cvar("shipStats", dump_json(shipStats))

    ship_attacks = []

    ship_attacks.append({"name": "Recharge Shields", "_v": 2, "verb": "uses", "activation_type": 2,
                         "automation": get_recharge_automation()})

    ship_attacks.append({"name": "Patch", "_v": 2, "verb": "uses", "activation_type": 2,
                         "automation": get_patch_automation()})

    ship_attacks.append({"name": "Hull - Damage Reduction", "_v": 2, "verb": "reduces incoming damage using",
                         "activation_type": 4, "automation": get_hull_reduction_automation()})

    ship_attacks.append({"name": "Shields - Damage REduction", "_v": 2, "verb": "reduces incoming damage using",
                         "activation_type": 4, "automation": get_shield_reduction_automation()})

    ship_attacks.append({"name": "Boost - Weapons", "_v": 2, "verb": "uses", "activation_type": 2,
                         "automation": get_boost_weapons_automation()})

    ship_attacks.append({"name": "Boost - Shields", "_v": 2, "verb": "uses", "activation_type": 2,
                         "automation": get_boost_shield_automation()})

    ship_attacks.append({"name": "Boost - Engines", "_v": 2, "verb": "uses", "activation_type": 2,
                         "automation": get_boost_engine_automation()})

    return ship_attacks

