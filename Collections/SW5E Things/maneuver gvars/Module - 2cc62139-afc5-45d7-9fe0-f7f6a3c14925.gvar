# New Maneuvers Module

c = character()
com = combat()
feats = load_json(c.get_cvar("SWFeats", "{}"))

def maneuver(args):
    hlp = not args or ('?' in args or 'help' in args)

    if hlp:
        return "help maneuver -here"
    
    # Params
    a = argparse(args)
    sm = a.get("sm") # Superiority Masters
    mm = a.get('mm') # Maneuver Master
    fs = a.get('fs') # Field Surgeon
    ku = a.get('ku') # Knowledge Unbound
    i = '-i' in args or ku
    crit = 'crit' in args
    fail = 'fail' in args
    pss = 'pass' in args

    # Get the maneuver
    feature = get_maneuver(args)

    # Get started
    lvl = get_level()

    type = a.last('type') if a.last('type') else feature.sub
    maneuverMod = get_mod(type)
    superiorityDice = get_superiority_dice(args, lvl, maneuverMod)

    cc = "Superiority Mastery" if sm else "Channel the Force" if mm else None if ku else "Superiority Dice"
    ccNum = 0 if i else feature.ccnum if "ccnum" in feature and feature.ccnum else -1
    cc_valid = (c.cc_exists(cc) and c.get_cc(cc) or i)
    cc_valid = False if (fs and not (c.cc_exists("Field Surgeon") and c.get_cc("Field Surgeon")) and not i) else cc_valid

    v = bool(lvl>=0 and cc_valid and feature)

    if v:
        targets = get_targets(feature, args)
        if a.get('dev'):
            return err(targets)

        # Feature Values
        # - Roll
        dice = do_roll(feature,superiorityDice, maneuverMod, args) if "roll" in feature and feature.roll else ""
        diceTotal = dice.total if dice else 0

        dmgType = a.last("dtype") if a.last("dtype") else feature.dmgType if "dmgType" in feature and feature.dmgType else "none"

        # Replace Feature Tags
        feature = dump_json(feature)
        tags = {
            "name": c.name,
            "superiorityDice": superiorityDice,
            "maneuverMod": maneuverMod,
            "dice": dice,
            "diceTotal": diceTotal,
            "dmgType": dmgType,
            "prof_bonus": c.stats.prof_bonus,
            "spell_mod": c.spellbook.spell_mod if c.spellbook.spell_mod else 0
        }

        for key, value in tags.items():
            feature = feature.replace(f"#{key}#", str(value).replace('"', '′'))
        
        feature = load_json(feature)

        # - Damage
        roll_str = get_roll_str(feature, dmgType, args)
        damage = vroll(f"""{f'-({roll_str})' if dmgType == "healing" else f'{roll_str}'}""",2 if crit else 1)

        # - THP
        thp = vroll(get_max_roll(feature.thp) if 'max' in args else get_max_roll(feature.thp) if fs else feature.thp) if "thp" in feature else vroll("0")

        # - DC for Check/Saves
        dc = get_dc(feature, maneuverMod, args)


        # Automation
        results_body = []
        results_footer = []
        total_dmg = 0
        for target in targets:
            f_str = f'-f "{target[0].name}|'
            f_body = []

            # - Damage
            if 'damage' in feature:
                d = target[0].damage(damage.consolidated() + ((f'+{target[1].join("d", "+")}') if target[1].get("d") else ""))
                f_body.append(d.damage)
                results_footer.append(f'{str(target[0])}')
                total_dmg += d.total

            # - THP
            if 'thp' in feature and target[0].temp_hp < thp.total:
                target[0].set_temp_hp(thp.total)
                f_body.append(f"***Temporary Hit Points**: {thp.total}")
                results_footer.append(f'{str(target[0])}')

            # - Effect
            if 'effect' in feature:
                eff = apply_effect(target, feature.effect)
                f_body.append(f"**Effect**: {eff}")

            # Text
            if 'targetText' in feature:
                f_body.append(feature.targetText.replace("#superiorityDice#", superiorityDice))

            # - Save
            if 'save' in feature:
                s_str = []
                save = target[0].save(feature.save.type, target[1].adv(False, True) if 'adv' in target[1] or 'dis' in target[1] else a.adv(False, True))
                s_str.append(f"**{feature.save.type.upper()} Save**: {save}; {'Automatic Failure!' if fail else 'Automatic Pass!' if pss else 'Failure!' if save.total < dc else 'Success!'}")

                option = feature.save.fail if (save.total < dc or fail) and not pss and "fail" in feature.save else feature.save.success if (save.total >= dc or pss) and "success" in feature.save else {}

                if 'damage' in option:
                    dmg = target[0].damage(option.damage + ((f'+{target[1].join("d", "+")}') if target[1].get("d") else ""))
                    total_dmg += dmg.total
                    s_str.append(dmg.damage)
                    results_footer.append(f'{str(target[0])}')
                
                if 'effect' in option:
                    eff = apply_effect(target, option.effect)
                    s_str.append(f"{eff}")

                f_body.append("\n".join(s_str))
                

            # - Check
            if 'check' in feature:
                c_str = []
                skill = [x for x,y in target[0].skills if feature.check.type.lower() in x.lower()][0]
                adv = target[1].adv(False, True) if 'adv' in target[1] or 'dis' in target[1] else a.adv(False, True)
                check = vroll(target[0].skills[skill].d20(adv))
                c_str.append(f"**{feature.check.type.title()} Check**: {check}; {'Automatic Failure!' if fail else 'Automatic Pass!' if pss else 'Failure!' if check.total < dc else 'Success!'}")
                option = feature.check.fail if (check.total < dc or fail) and not pss and "fail" in feature.check else feature.check.success if (check.total >= dc or pss) and "success" in feature.check else {}

                if 'damage' in option:
                    dmg = target[0].damage(option.damage + ((f'+{target[1].join("d", "+")}') if target[1].get("d") else ""))
                    total_dmg += dmg.total
                    c_str.append(dmg.damage)
                    results_footer.append(f'{str(target[0])}')
                
                if 'effect' in option:
                    eff = apply_effect(target, option.effect)
                    c_str.append(f"{eff}")

                f_body.append("\n".join(c_str))

            f_str += "\n".join(f_body) + '"'
            results_body.append(f_str)

        if len(targets) > 1 and total_dmg != 0:
            results_body.append(f''' -f "**__Total {'Damage' if total_dmg > 0 else 'Healing'}__**: {total_dmg}"''')



        # Pay the cost
        if not i:
            c.mod_cc(cc,ccNum)
            if fs:
                c.mod_cc("Field Surgeon", -1)

        # Output formatting
        formatting = {
            "uses": "uses",
            "desc": feature.validUse,
            "counterChange": f'{cc}{" ("+("+" if ccNum>0 else "")+str(ccNum)+")" if ccNum else ""}|{c.cc_str(cc)}' if cc and c.cc_exists(cc) and not i else "",
            "color": c.csettings.color,
            "image": c.image,
            "dice": dice,
            "diceTotal": diceTotal,
            "targetOutput": "\n".join(results_body),
            "hp": c.hp_str(),
            "name": c.name,
            "damageText": damage,
            "combatantFooter": "\n".join(results_footer),
            "thp": thp,
            "superiorityDice": superiorityDice,
            "dc": dc
        }

        out = f"embed -thumb {c.image} {feature.desc}"

        for key, value in formatting.items():
            out = out.replace(f"#{key}#", str(value))

        # End field additions for feats
        if sm:
           out += f''' -f "Superiority Mastery|Choose one maneuver you know. When you would use the chosen maneuver, you can use a d4 instead of expending a superiority die. You can do so a number of times equal to your proficiency bonus. You regain all expended uses when you complete a long rest."'''

        if mm:
            out += f''' -f "Masters Maneuver|When you would use a maneuver, you can expend a use of your Channel the force. You do not expend a die to use the maneuver and if you would roll the maneuver die for the maneuver, you add half your maneuver modifier to the result." '''

        if fs:
            out += f''' -f "Field Surgeon ({"-1" if not i else ""})|{c.cc_str("Field Surgeon")}\nWhenever you expend superiority dice to restore hit points or grant temporary hit points to a creature, if the creature is the target of your Critical Analysis, you can instead choose the maximum on both dice. Once you’ve used this feature, you must finish a short or long rest before you can use it again. Starting at 11th level, you can use it twice before a rest, but only once on the same turn."'''
        
        if ku:
            out += f''' -f "Knowledge Unbound|You are the pinnacle of your pursuit. Your Intelligence score increases by 4. Your maximum for that score increases by 4. Additionally, you can use any maneuver you know without expending a superiority die, rolling a d4 instead." '''

        if a.get('dev'):
            return err(out)
        return out

    elif not c.cc_exists(cc) and not i:
        return err(F"No counter named `{cc}` exists.")
    elif not c.get_cc(cc) and not i:
        out += f''' -title "{c.name} attempts {feature.name}." -desc "Unfortunately there are no `{cc}` to do it. Take a short/long reset then try again"'''
    elif not cc_valid:
        out += f''' -title "{c.name} attempts {feature.name}." -desc "Unfortunately there are not enough to do it how they wanted! Take a short/long reset then try again"'''
    else:
        return err(f"Something went wrong here. Let Corvux know and he'll break it better.")
  


def get_level():
    lvl = 0
    subclasses = load_json(c.get_cvar("subclass", "{}"))

    if subclasses.get("BerserkerLevel","") == "Champion":
        lvl = max(int(c.levels.get("Berserker", 0)), lvl)

    if subclasses.get("ScoutLevel", "") == "Deadeye":
        lvl = max(int(c.levels.get("Scout", 0)),lvl)

    if subclasses.get("ConsularlightLevel", "") == "Tutelage (Companionless)":
        lvl = max(int(c.levels.get('Consularlight', 0)),lvl)

    lvl = max(int(c.levels.get("Fighter",0)), int(c.levels.get("Scholar",0)), lvl)

    if lvl == 0:
        lvl = c.levels.total_level

    return lvl

def get_maneuver(args):
    maneuver_gvar = ["9b5b0cde-2e3c-4a8a-a662-eb843f6e85a8"]
    maneuver_gvar += load_json(get_svar("sw5e", "{}")).get('maneuvers', [])
    search_str = args[0]


    for g in maneuver_gvar:
        maneuvers = load_json(get_gvar(g))
        for man in maneuvers:
            if search_str.lower() in man.name.lower() or 'syn' in man and search_str.lower() in man.syn.lower():
                return man
            
    return err("Maneuver not found.")


def get_mod(type):
    s = c.stats

    if type == "Mental":
        return max(s.get_mod("wisdom"), s.get_mod("intelligence"), s.get_mod("charisma"), 0)
    elif type == "Physical":
        return max(s.get_mod("strength"), s.get_mod("dexterity"), s.get_mod("constitution"), 0)
    else:
        return max(get_mod("Mental"), get_mod("Physical"))
    
def get_targets(feature, args):
    if not com:
        return []
    
    a = argparse(args)

    targets = []
    target_cache = a.get('t')
    if 'self' in feature and com and com.me:
        target_cache.append(c.name)

    for t in target_cache:
        t_name = t.split('|', 1)[0].replace('{name}', c.name)
        t_args = argparse(t.split('|', 1)[1] if '|' in t else '')

        com_target = com.get_combatant(t_name)
        if not com_target:
            return err(f"Invalid target `{t_name}`")
        elif 'c' not in com_target.type:
            for c in com_target.combatants:
                targets.append([c, t_args])
        else:
            targets.append([com_target, t_args])

    return targets

def do_roll(feature, superiorityDice, maneuverMod, args):
    a = argparse(args)
    roll_str = feature.roll
    roll_str = roll_str.replace('#superiorityDice#', superiorityDice).replace('#maneuverMod#', str(maneuverMod))
    for n, sk in c.skills:
        roll_str = roll_str.replace(f'#{n}#', f'1d20+{sk.value}')

    if a.get('max') or a.get('fs'):
        roll_str = get_max_roll(roll_str)

    return vroll(roll_str)

def get_max_roll(dmg_str):
    parts = dmg_str.split("+")

    total_damage = ""

    for part in parts:
        if '[' in part or ']' in part:
            start = part.index('[')
            part = part[:start].strip()

        if '{' in part or '}' in part:
            total_damage += f"+{part}"
        elif 'd' in part:
            num, size = [x if x else 1 for x in part.split('d')]

            if 'mi' in size:
                size = int(size.split('mi')[0])

            num = int(num)
            if len(total_damage) > 1:
                total_damage += f"+{num * size}"
            else:
                total_damage += num*size
        else:
            total_damage += f"+{part}"
    return total_damage

def get_superiority_dice(args,level, maneuverMod):
    a = argparse(args)

    dice = '1d4' if level < 5 or a.get('sm') or a.get('ku') else '1d6' if level < 9 else '1d8' if level < 13 else '1d10' if level < 16 else '1d12'

    if "PerfectManeuver" in feats.get("Discoveries",[]) or a.get('mi'):
        dice += f"mi{a.last('mi') if a.last('mi') else 2 if 'd4' in dice or 'd6' in dice else 3 if 'd8' in dice else 4 if 'd10' in dice else 5}"

    if a.get('savage') or 'adv' in args:
        dice = dice.replace('1d', '2d') + 'kh1'

    if a.get('mm'):
        dice += f"+{ceil(maneuverMod/2)}"

    return dice\
    
def get_roll_str(feature, dmgType, args):
    a = argparse(args)

    roll_str = feature.damage + roll_add(feature, dmgType, args) if 'damage' in feature else '0'

    if a.get('fs') or 'max' in args:
        roll_str = get_max_roll(roll_str)

    return roll_str


def roll_add(feature, dmgType, args):
    a = argparse(args)
    bonus = ""
    lvl = get_level()
    sm = a.get("sm") and feats.get("SupMastery")
    superiorityDice = '1d4' if lvl < 5 or sm else '1d6' if lvl < 9 else '1d8' if lvl < 16 else '1d12'

    # Additional Bonus
    if int(c.levels.get("Scholar", 0)) >= 6 and load_json(c.get_cvar("subclass", "{}")).get("ScholarLevel") == "Physician" and dmgType.lower() == "healing":
        bonus = superiorityDice

    roll_str = f'''{f'+{a.join("d", "+")}' if a.get("d") else ""}{f'+{bonus}' if bonus != "" else ""}{f' [{dmgType}]' if dmgType else ''} '''

    return roll_str

def get_dc(feature, maneuverMod, args):
    a = argparse(args)

    if a.get('dc'):
        return int(a.last('dc'))
    elif 'save' in feature and 'dc' in feature.save:
        return roll(feature.save.dc)
    elif 'check' in feature and 'dc' in feature.check:
        return roll(feature.check.dc)
    else:
        return 8+c.stats.prof_bonus+maneuverMod
             
def apply_effect(target, effect):
    if 'parent' in effect:
        if not (peff := com.me.get_effect(effect.parent.name.replace("#target#", target[0].name))):
            peff = com.me.add_effect(effect.parent.name.replace("#target#", target[0].name),
                                     desc=effect.parent.desc if 'desc' in effect.parent else None,
                                     duration=effect.parent.duration if 'duration' in effect.parent else -1,
                                     concentration=effect.parent.conc if 'conc' in effect.parent else False,
                                     end=effect.parent.end if 'end' in effect.parent else False)
            
    eff = target[0].add_effect(effect.name.replace("#target#", target[0].name),
                               desc=effect.desc if 'desc' in effect else "",
                               duration=effect.duration if 'duration' in effect else -1,
                               end=effect.end if 'end' in effect else False,
                               passive_effects=effect.passive_effect if "passive_effect" in effect else None,
                               tick_on_combatant_id=com.me.id if 'tick_on_caster' in effect and com.me else None,
                               buttons=effect.buttons if 'buttons' in effect else None)
    
    return eff
