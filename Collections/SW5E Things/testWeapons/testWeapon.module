def createAttacks(attacks, args):
    out = []
    c = character()
    counter = ""
    for i, a in enumerate(attacks):
        attack = {}
        prop = [x.lower() for x in a.properties.split(',')]
        attack["name"] = a.name if not args.get('title') else args.get('title')
        damage = f"{a.numDie}d{a.dieType}"
        bdamage = '' if not args.get('d') else f"+{args.last('d')}"
        dmod = getAttackMod(a)
        dtype = a.dType
        attack["automation"] = []

        if 'auto' not in prop:
            damage = {}
            damage["type"] = "damage"
            damage["damage"] = f"{damage}{bdamage}{f'+{dmod}' if dmod else ''} [{dType}]"
            damage["overheal"] = false
            atk = {}
            atk["type"] = "attack",
            atk["hit"] = []
            atk["miss"] = []
            atk["attackBonus"] = getAttackBonus(a, args)
            atk["hit"].append(damage)

            if "reload" in prop:



        return err(f"Properties: {prop} \n\n {attack}")

        attack["_v"] = 2
        if "counter" in str(a):
            index = attack.find('"counter": "') + 12
            counter = str(attack[index:attack[index:].find('"')+index])
            if not c.cc_exists(counter):
                reload = int(prop[prop.index("reload "):].lstrip("reload ")[:2].rstrip(", "))
                c.create_cc(counter, 0, reload, None, 'bubble', reload)

        out.append(load_json(attack))

    return out, counter

def processName(name):
    out = name
    out = out.replace("Rapid - ", '').replace("Burst - ", '').replace("Two-Handed ", '').replace(" - Rifle", '').replace(" - Staff", '').replace("Penetrating - ",'')
    out = out.replace("Cartridge, Slug - ", '').replace("Cartridge, Corrosive - ", '').replace("Cartridge, Electrifying - ", '').replace("Cartridge, Gas - ", '')
    out = out.replace("Rocket, Fragmentation - ",'').replace("Rocket, Incendiary - ", '').replace("Rocket, Ion - ", '')
    out = out.replace("Missile, Fragmentation - ", '').replace("Missile, Incendiary - ", '').replace("Missile, Ion - ", '')
    out = out.replace("Arrow - ", '').replace("Arrow, Combustive - ", '').replace("Arrow, Electroshock - ", '').replace("Arrow, Noisemaker - ", '')
    out = out.replace("Dart - ", '').replace("Dart - Deafening - ", '').replace("Dart, Electrifying - ", '').replace("Dart, Panic - ", '')
    out = out.replace("Projector Canister, Corrosive - ", '').replace("Projector Canister, Cryo - ", '').replace("Projector Canister, Incendiary - ", '')
    out = out.replace("Acid - ", '').replace("Cold - ", '').replace("Fire - ", '').replace("Lightning - ", '')
    out = out.replace("Acid, ", '').replace("Cold, ", '').replace("Fire, ", '').replace("Lightning, ", '')
    out = out.replace("Bolt - ", '').replace("Bolt, Deafening - ", '').replace("Bolt, Electrifying - ", '').replace("Bolt, Panic - ", '')

    return out

def updateName(attack, prefix, cupdate=True):
    a = load_json(attack)
    test = attack
    test = test.replace(f'"name": "{a.name}"', f'"name": "{prefix} - {a.name}"')
    if cupdate and "counter" in test:
        index = test.find('"counter": "') + 12
        counter = str(test[index:test[index:].find('"') + index])
        test = test.replace(f'"counter": "{counter}"', f'"counter": "{prefix} {counter}"')
    return test

def getProperties(attack):
        a = load_json(attack)
        return str(a.automation[len(a.automation) - 2].get("text")).lower() if not a.automation[len(a.automation) - 1].get(
            "text") else str(a.automation[len(a.automation) - 1].get("text")).lower()



def getAttackMod(a):
    prop = [x.lower() for x in a.properties.split(',')]
    if "finesse" or "mighty" in prop:
        return "{max(strengthMod,dexterityMod)}"
    elif "heavy" in prop:
        return "{ceil(strengthMod*1.5)}"
    elif "blaster" in a.wClass.lower():
        return "{dexterityMod}"
    else:
        return "{strengthMod}"

def getAttackBonus(a, args):
    prop = [x.lower() for x in a.properties.split(',')]
    out = ""
    if not args.get('noprof') or args.get('gwm') or args.get('sharp') or args.get('gunning'):
        out += "proficiencyBonus+"

    if "finesse" or "mighty" in prop:
        out += "max(strengthMod,dexterityMod)"
    elif "blaster" in a.wClass.lower():
        out += "dexterityMod"
    else:
        out += "strengthMod"

    return out







