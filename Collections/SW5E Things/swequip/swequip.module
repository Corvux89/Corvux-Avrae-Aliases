# SWEQUIP Primary Module
c = character()
using(weap="8202f283-16d2-47ba-8a5e-0d0cf29a1ef1", sup="8b78365a-5c05-4c8f-8364-fbde2e3de862")
stats = ["strength", "dexterity", "constitution", "intelligence", "wisdom", "charisma"]
subclasses = sup.get_subclasses()

def processAttacks(attacks, args):
    out = []
    for i, a in enumerate(attacks):
        attack = dump_json(a)
        counter = ""

        if args.get('prop') and args.last('prop') != "True":
            attack = sup.replaceProperties(attack, args.last('prop'))

        if args.get('reload') and args.last('reload') != 'True':
            new_reload = args.last('reload')
            prop = sup.getProperties(attack,None)
            if "reload" in prop.lower():
                index = attack.find('reload') if 'reload' in attack else attack.find('Reload')
                reload = int(prop[prop.lower().index("reload "):].lstrip("reload ").lstrip("Reload ")[:2].rstrip(", "))
                old_reload = str(attack[index:attack[index:].find(str(reload))+index+len(str(reload))])
                attack = attack.replace(f"{old_reload}", f"reload {new_reload}")

        prop = sup.getProperties(attack)

        if not(sup.processName(a.name) == sup.baseName(a.name) or args.get('ammo')):
            continue
        elif not args.get('ammo'):
            attack = attack.replace(f'{a.name}', f'{sup.stripAmmo(a.name)}')

        if args.get('ammo'):
            if args.last('ammo') != 'True' and args.last('ammo').lower() not in a.name.lower() and args.last('ammo').lower() not in sup.processName(a.name).lower():
                continue

        if args.get('title'):
            attack = attack.replace(f'{sup.processName(a.name)}', f'{args.last("title")}')

        if args.get('dmg'):
            if "rapid" in a.name.lower():
                die_str = args.last("dmg")
                numDie = int(die_str[:die_str.find("d")])*2
                die_str = f"{numDie}{die_str[die_str.find('d'):]}"
                attack = attack.replace(sup.get_damage_die(attack), die_str)
            else:
                attack = attack.replace(sup.get_damage_die(attack), args.last("dmg"))

        if args.get('bstat'):
            stat = f'{[x for x in stats if args.last("bstat").lower() in x][0]}Mod'
            bonus = sup.get_attack_bonus(attack)
            bonus = bonus.replace('dexterityMod', stat).replace('strengthMod', stat)
            attack = attack.replace(sup.get_attack_bonus(attack), f"{bonus}")

        if args.get('b'):
            attack = attack.replace('attackBonus": "', f'attackBonus": "{args.last("b")}+')
            if "burst" in a.name.lower() or "rapid" in a.name.lower():
                attack = attack.replace('"8+proficiencyBonus', f'"8+proficiencyBonus+{args.last("b")}')

        if args.get('dstat'):
            stat = f'{[x for x in stats if args.last("dstat").lower() in x][0]}Mod'
            bonus = sup.get_damage_str(attack)
            bonus = bonus.replace('dexterityMod', stat).replace('strengthMod', stat)
            attack = attack.replace(sup.get_damage_str(attack), f"{bonus}")

        if args.get('d'):
            attack = attack.replace('} [', '}' + f'+{args.last("d")} [')

        if args.get('ad'):
            attack = attack.replace(sup.get_damage_str(attack), f'{sup.get_damage_str(attack)}+{args.last("ad")}')

        if args.get('dc'):
            index = attack.find('"dc": ')+6
            dc = str(attack[index:attack[index:].find('}') + index])
            attack = attack.replace(f'"dc": {dc}', f'"dc": {args.last("dc")}')

        if args.get('criton'):
            if "criton" in attack:
                index = attack.find('"criton": ') + 10
                crit = str(attack[index:attack[index:].find('}') + index])
                attack = attack.replace(f'"criton": {crit}', f'"criton": {args.last("criton")}')
            else:
                attack = attack.replace('_v": 2', f'_v": 2, "criton":{args.last("criton")}')

        if args.get('keen'):
            if "criton" in attack:
                index = attack.find('"criton": ') + 10
                crit = str(attack[index:attack[index:].find('}') + index])
                attack = attack.replace(f'"criton": {crit}', f'"criton": {20 - int(args.last("keen"))}')
            else:
                attack = attack.replace('_v": 2', f'_v": 2, "criton": {20 - int(args.last("keen"))}')

        if args.get('c'):
            if "extra_crit_damage" in attack:
                index = attack.find('"extra_crit_damage": "') + 22
                crit = str(attack[index:attack[index:].find('"') + index])
                attack = attack.replace(f'"extra_crit_damage": "{crit}"',
                                        f'"extra_crit_damage": "{crit}+{args.last("c")}"')
            else:
                attack = attack.replace('_v": 2', f'_v": 2,"extra_crit_damage": "{args.last("c")}"')

        if args.get('noprof'):
            attack = attack.replace('proficiencyBonus+', '').replace('+proficiencyBonus', '')

        if args.get('offhand'):
            attack = sup.updateName(attack, "Offhand")
            if "finesse" in prop:
                attack = attack.replace('+{max(strengthMod,dexterityMod)}', '')
            elif "heavy" in prop:
                attack = attack.replace('+{ceil(strengthMod*1.5)}', '')
            attack = attack.replace('+{dexterityMod}', '')
            attack = attack.replace('+{strengthMod}', '')

        if args.get('double'):
            attack = sup.updateName(attack, "Double", False)
            if "finesse" in prop:
                attack = attack.replace('+max(strengthMod,dexterityMod)', '')
            elif "heavy" in prop:
                attack = attack.replace('+{ceil(strengthMod*1.5)}', '')
            attack = attack.replace('+dexterityMod', '')
            attack = attack.replace('+strengthMod', '')

        if args.get('gwm'):
            attack = sup.updateName(attack, "Great", False)
            attack = attack.replace('proficiencyBonus+', '').replace('+proficiencyBonus', '')
            attack = attack.replace('} [', '}' + f'+{c.stats.prof_bonus * 2} [')

        if args.get('sharp'):
            attack = sup.updateName(attack, "Sharpshooter", False)
            attack = attack.replace('proficiencyBonus+', '').replace('+proficiencyBonus', '')
            attack = attack.replace('} [', '}' + f'+{c.stats.prof_bonus * 2} [')

        if args.get('enhanced'):
            dmg = sup.get_damage_str(attack)
            dmg = dmg.replace('[', '[enhanced ')
            attack = attack.replace(sup.get_damage_str(attack), dmg)

        if args.get('dtype') and args.last('dtype') != "True":
            dmg = sup.get_damage_str(attack)
            dmg_type = sup.get_damage_type(dmg)
            attack = attack.replace(dmg_type, args.last('dtype'))

        if args.get('gunmas') and ("rapid - " in a.name.lower() or "burst - " in a.name.lower()):
            attack = attack.replace('"success": []',
                                    '"success": [{"type":"damage","damage":"{dexterityMod}","overheal":"false"}]')
            out.append(load_json(attack))
            attack = sup.updateName(attack, "Gunning", False)
            attack = attack.replace('proficiencyBonus+', '').replace('+proficiencyBonus', '')
            if "rapid - " in a.name.lower():
                dmg = sup.get_damage_str(attack)
                dmg = dmg.replace(" [", f"+{c.stats.prof_bonus*2} [")
                attack = attack.replace(sup.get_damage_str(attack), dmg)
            else:
                dmg = sup.get_damage_str(attack)
                dmg = dmg.replace(" [", f"+{c.stats.prof_bonus} [")
                attack = attack.replace(sup.get_damage_str(attack), dmg)

        if args.get('gunstyle') and ("rapid - " in a.name.lower() or "burst - " in a.name.lower()):
                attack, gun = weap.gunning_style(attack, args)
                if gun:
                    out.append(load_json(gun))

        if args.get('heavy'):
            if "finesse" in prop:
                attack = attack.replace('+{max(strengthMod,dexterityMod)}', '+{ceil(strengthMod*1.5)}')
            attack = attack.replace('+{dexterityMod}', '+{ceil(strengthMod*1.5)}')
            attack = attack.replace('+{strengthMod}', '+{ceil(strengthMod*1.5)}')

        if args.get('finesse') or args.get('mighty'):
            bonus = sup.get_attack_bonus(attack)
            if "dexterityMod" in bonus:
                attack = attack.replace('dexterityMod', 'max(strengthMod,dexterityMod)')
            elif "strengthMod" in bonus:
                attack = attack.replace('strengthMod', 'max(strengthMod,dexterityMod)')

        if args.get('biting'):
            attack, biting = weap.biting(attack, args)
            if biting:
                out.append(load_json(biting))

        if args.get('bright'):
            attack, bright = weap.bright(attack, args)
            if bright:
                out.append(load_json(bright))

        if args.get('corruption'):
            attack, corrupt = weap.corruption(attack, args)
            if corrupt:
                out.append(load_json(corrupt))

        if args.get("disarming"):
            if '"type": "attack"' in attack:
                attack = weap.disarming(attack, args)

        if args.get("disintegrate"):
            attack = weap.disintegrate(attack, args)

        if args.get("neuralizing"):
            attack = weap.neuralizing(attack, args)

        if args.get("shocking"):
            attack = weap.shocking(attack, args)

        if args.get("sonorous"):
            attack = weap.sonorous(attack, args)

        if args.get("staggering"):
            attack = weap.staggering(attack, args)

        if args.get("igniting"):
            attack = weap.igniting(attack, args)

        if args.get("vicious") and 'rapid' not in a.name.lower() and 'burst' not in a.name.lower() and 'penetrating' not in a.name.lower():
            vicious = weap.vicious(attack, args)
            if vicious:
                out.append(load_json(vicious))

        if args.get('burst') and 'rapid' not in a.name.lower() and 'penetrating' not in a.name.lower():
            burst = weap.burst(attack, args)
            if burst:
                out += load_json(burst)

        if args.get('rapid') and 'rapid' not in a.name.lower() and 'burst' not in a.name.lower() and 'penetrating' not in a.name.lower():
            rapid = weap.rapid(attack, args)
            if rapid:
                out += load_json(rapid)

        if args.get('penetrating') and 'rapid' not in a.name.lower() and 'burst' not in a.name.lower() and 'rapid' not in a.name.lower():
            penetrating = weap.penetrating(attack, args)
            if penetrating:
                out.append(load_json(penetrating))

        if "overheat" in prop:
            cd = weap.cooldown(attack, args)
            if cd:
                out.append(load_json(cd))

        if "counter" in attack:
            index = attack.find('"counter": "') + 12
            counter = str(attack[index:attack[index:].find('"') + index])
            if not c.cc_exists(counter):
                reload = 0
                if "reload" in prop:
                    reload = int(prop[prop.index("reload "):].lstrip("reload ")[:2].rstrip(", "))
                elif "overheat" in prop:
                    reload = int(prop[prop.index("overheat "):].lstrip("overheat ")[:2].rstrip(", "))

                if reload > 0:
                    c.create_cc(counter, 0, reload, None, 'bubble', reload)

        # Class Specific Overrides
        if "Focus" in subclasses:
            level = max(int(c.levels.get("Sentinellight",0)), int(c.levels.get("Sentineldark",0)),0)

            if args.get('dev'):
                return err(level)

            bs = weap.blade_storm(attack, level, args)
            if bs:
                out.append(load_json(bs))

        out.append(load_json(attack))

    if args.get('auto'):
        out = [x for x in out if "burst" in x.name.lower() or "rapid" in x.name.lower() or "penetrating" in x.name.lower()]

    return out, counter
