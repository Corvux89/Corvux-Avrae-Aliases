def processAttacks(attacks, args):
    out = []
    for i, a in enumerate(attacks):
        attack = dump_json(a)
        counter = ""
        prop = str(a.automation[len(a.automation) - 2].get("text")).lower() if not a.automation[len(a.automation) - 1].get("text") else str(a.automation[len(a.automation) - 1].get("text")).lower()

        if args.get('b'):
            attack=attack.replace('attackBonus": "', f'attackBonus": "{args.last("b")}+')

        if args.get('d'):
            attack=attack.replace('} [', '}' + f'+{args.last("d")} [')

        if args.get('criton'):
            attack=attack.replace('_v": 2', f'_v": 2,"criton":{args.last("criton")}')

        if args.get('c'):
            attack=attack.replace('_v": 2', f'_v": 2,"extra_crit_damage": "{args.last("c")}"')

        if args.get('noprof'):
            attack=attack.replace('proficiencyBonus+', '').replace('+proficiencyBonus', '')

        if args.get('offhand'):
            attack=attack.replace('"name": "', '"name": "Offhand ')
            if "counter" in str(a):
                    attack=attack.replace('"counter": "', '"counter": "Offhand ')
            if "finesse" in prop:
                attack = attack.replace('+{max(strengthMod,dexterityMod)}', '')
            elif "heavy" in prop:
                attack = attack.replace('+{ceil(strengthMod*1.5)}', '')
            attack = attack.replace('+{dexterityMod}', '')
            attack = attack.replace('+{strengthMod}', '')

        if args.get('double'):
            attack=attack.replace('"name": "', '"name": "Double ')
            if "finesse" in prop:
                attack = attack.replace('+max(strengthMod,dexterityMod)','')
            elif "heavy" in prop:
                attack = attack.replace('+{ceil(strengthMod*1.5)}','')
            attack = attack.replace('+dexterityMod', '')
            attack = attack.replace('+strengthMod', '')

        if args.get('gwm'):
            attack = attack.replace('"name": "', '"name": "Great ')
            attack = attack.replace('proficiencyBonus+', '').replace('+proficiencyBonus', '')
            attack = attack.replace('} [', '}' + f'+{character().stats.prof_bonus*2} [')

        if args.get('sharp'):
            attack = attack.replace('"name": "', '"name": "Sharpshooter ')
            attack = attack.replace('proficiencyBonus+', '').replace('+proficiencyBonus', '')
            attack = attack.replace('} [', '}' + f'+{character().stats.prof_bonus * 2} [')

        if args.get('enhanced'):
            attack = attack.replace('} [', '} [enhanced ')
            attack = attack.replace('[lightning]', '[enhanced lightning]')

        if args.get('rapid'):
            return err(f"{a.automation[0]}")

        if args.get('heavy'):
            if "finesse" in prop:
                attack = attack.replace('+{max(strengthMod,dexterityMod)}','+{ceil(strengthMod*1.5)}')
            attack = attack.replace('+{dexterityMod}', '+{ceil(strengthMod*1.5)}')
            attack = attack.replace('+{strengthMod}', '+{ceil(strengthMod*1.5)}')


        if "counter" in str(a):
            index = attack.find('"counter": "') + 12
            counter = str(attack[index:attack[index:].find('"')+index])
            if not character().cc_exists(counter):
                reload = int(prop[prop.index("reload "):].lstrip("reload ")[:2].rstrip(", "))
                character().create_cc(counter, 0, reload, None, 'bubble', reload)

        out.append(load_json(attack))

    return out, counter

def processName(name):
    out = name
    out = out.replace("Rapid - ", '').replace("Burst - ", '').replace("Two-Handed ", '').replace(" - Rifle", '').replace(" - Staff", '').replace("Penetrating - ",'')
    out = out.replace("Cartridge, Slug - ", '').replace("Cartridge, Corrosive - ", '').replace("Cartridge, Electrifying - ", '').replace("Cartridge, Gas - ", '')
    out = out.replace("Rocket, Fragmentation - ",'').replace("Rocket, Incendiary - ", '').replace("Rocket, Ion - ", '')
    out = out.replace("Missile, Fragmentation - ", '').replace("Missile, Incendiary - ", '').replace("Missile, Ion - ", '')
    out = out.replace("Arrow - ", '').replace("Arrow, Combustive - ", '').replace("Arrow, Electroshock - ", '').replace("Arrow, Noisemaker - ", '')
    out = out.replace("Dart - ", '').replace("Dart - Deafening - ", '').replace("Dart, Electrifying - ", '').replace("Dart, Panic - ", '')
    out = out.replace("Projector Canister, Corrosive - ", '').replace("Projector Canister, Cryo - ", '').replace("Projector Canister, Incendiary - ", '')
    out = out.replace("Acid - ", '').replace("Cold - ", '').replace("Fire - ", '').replace("Lightning - ", '')
    out = out.replace("Acid, ", '').replace("Cold, ", '').replace("Fire, ", '').replace("Lightning, ", '')

    return out
