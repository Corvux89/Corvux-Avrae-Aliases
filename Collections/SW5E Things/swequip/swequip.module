def processAttacks(attacks, args):
    out = []
    c = character()
    using(weap="8202f283-16d2-47ba-8a5e-0d0cf29a1ef1", sup="8b78365a-5c05-4c8f-8364-fbde2e3de862")
    for i, a in enumerate(attacks):
        attack = dump_json(a)
        counter = ""
        prop = sup.getProperties(attack)

        if args.get('title'):
            attack = attack.replace(f'{sup.processName(a.name)}', f'{args.last("title")}')

        if args.get('b'):
            attack=attack.replace('attackBonus": "', f'attackBonus": "{args.last("b")}+')
            if "burst" in a.name.lower() or "rapid" in a.name.lower():
                attack=attack.replace('"8+proficiencyBonus', f'"8+proficiencyBonus+{args.last("b")}')

        if args.get('d'):
            attack=attack.replace('} [', '}' + f'+{args.last("d")} [')

        if args.get('criton'):
            if "criton" in attack:
                index = attack.find('"criton": ') + 10
                crit = str(attack[index:attack[index:].find('}') + index])
                attack = attack.replace(f'"criton": {crit}', f'"criton": {args.last("criton")}')
            else:
                attack=attack.replace('_v": 2', f'_v": 2, "criton":{args.last("criton")}')

        if args.get('keen'):
            if "criton" in attack:
                index = attack.find('"criton": ') + 10
                crit = str(attack[index:attack[index:].find('}') + index])
                attack = attack.replace(f'"criton": {crit}', f'"criton": {20-int(args.last("keen"))}')
            else:
                attack = attack.replace('_v": 2', f'_v": 2, "criton": {20 - int(args.last("keen"))}')

        if args.get('dev'):
            return err(f"{attack}")

        if args.get('c'):
            if "extra_crit_damage" in attack:
                index = attack.find('"extra_crit_damage": "') + 22
                crit = str(attack[index:attack[index:].find('"') + index])
                attack = attack.replace(f'"extra_crit_damage": "{crit}"', f'"extra_crit_damage": "{crit}+{args.last("c")}"')
            else:
                attack=attack.replace('_v": 2', f'_v": 2,"extra_crit_damage": "{args.last("c")}"')

        if args.get('noprof'):
            attack=attack.replace('proficiencyBonus+', '').replace('+proficiencyBonus', '')

        if args.get('offhand'):
            attack = sup.updateName(attack, "Offhand")
            if "finesse" in prop:
                attack = attack.replace('+{max(strengthMod,dexterityMod)}', '')
            elif "heavy" in prop:
                attack = attack.replace('+{ceil(strengthMod*1.5)}', '')
            attack = attack.replace('+{dexterityMod}', '')
            attack = attack.replace('+{strengthMod}', '')

        if args.get('double'):
            attack = sup.updateName(attack, "Double", False)
            if "finesse" in prop:
                attack = attack.replace('+max(strengthMod,dexterityMod)','')
            elif "heavy" in prop:
                attack = attack.replace('+{ceil(strengthMod*1.5)}','')
            attack = attack.replace('+dexterityMod', '')
            attack = attack.replace('+strengthMod', '')

        if args.get('gwm'):
            attack = sup.updateName(attack, "Great", False)
            attack = attack.replace('proficiencyBonus+', '').replace('+proficiencyBonus', '')
            attack = attack.replace('} [', '}' + f'+{c.stats.prof_bonus*2} [')

        if args.get('sharp'):
            attack = sup.updateName(attack, "Sharpshooter", False)
            attack = attack.replace('proficiencyBonus+', '').replace('+proficiencyBonus', '')
            attack = attack.replace('} [', '}' + f'+{c.stats.prof_bonus * 2} [')

        if args.get('enhanced'):
            attack = attack.replace('} [', '} [enhanced ')

        if args.get('gunning') and ("rapid - " in a.name.lower() or "burst - " in a.name.lower()):
            attack = attack.replace('"success": []',
                                    '"success": [{"type":"damage","damage":"{dexterityMod}","overheal":"false"}]')
            out.append(load_json(attack))
            attack = sup.updateName(attack, "Gunning", False)
            attack = attack.replace('proficiencyBonus+', '').replace('+proficiencyBonus', '')
            attack = attack.replace('} [', '}' + f'+{c.stats.prof_bonus} [')

        if args.get('heavy'):
            if "finesse" in prop:
                attack = attack.replace('+{max(strengthMod,dexterityMod)}','+{ceil(strengthMod*1.5)}')
            attack = attack.replace('+{dexterityMod}', '+{ceil(strengthMod*1.5)}')
            attack = attack.replace('+{strengthMod}', '+{ceil(strengthMod*1.5)}')

        if args.get('finesse') or args.get('mighty'):
            bonus = sup.get_attack_bonus(attack)
            if "dexterityMod" in bonus:
                attack = attack.replace('dexterityMod', 'max(strengthMod,dexterityMod)')
            elif "strengthMod" in bonus:
                attack = attack.replace('strengthMod', 'max(strengthMod,dexterityMod)')

        if args.get('biting'):
            attack, biting = weap.biting(attack, args)
            if biting:
                out.append(load_json(biting))

        if args.get('bright'):
            attack, bright = weap.bright(attack, args)
            if bright:
                out.append(load_json(bright))

        if args.get('corruption'):
            attack, corrupt = weap.corruption(attack, args)
            if corrupt:
                out.append(load_json(corrupt))

        if args.get("disarming"):
            if '"type": "attack"' in attack:
                attack = weap.disarming(attack, args)

        if args.get("disintegrate"):
            attack = weap.disintegrate(attack, args)

        if args.get("neuralizing"):
            attack = weap.neuralizing(attack, args)

        if args.get("shocking"):
            attack = weap.shocking(attack, args)

        if args.get("sonorous"):
            attack = weap.sonorous(attack, args)

        if args.get('burst') and 'rapid' not in a.name.lower():
            burst = weap.burst(attack, args)
            if burst:
                out.append(load_json(burst))

        if args.get('rapid') and 'rapid' not in a.name.lower():
            rapid = weap.rapid(attack, args)
            if rapid:
                out.append(load_json(rapid))

        if "counter" in attack:
            index = attack.find('"counter": "') + 12
            counter = str(attack[index:attack[index:].find('"')+index])
            if not c.cc_exists(counter):
                reload = int(prop[prop.index("reload "):].lstrip("reload ")[:2].rstrip(", "))
                c.create_cc(counter, 0, reload, None, 'bubble', reload)

        out.append(load_json(attack))

    return out, counter