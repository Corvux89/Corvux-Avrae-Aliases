tembed
{{args,defaults=get('args',"@"),get('defaults',"D")}}
{{beyond=get_raw().type=='beyond' and not argparse(args).get('cc')}}
{{dagger,newline='â€ ','\n'}}
{{args=[x.lower() for x in args]}}
{{remover=[args.remove(x) if x in args else "" for x in ["path","college","circle","way","the","domain","oath","bloodline","school","of","-cc"]]}}
{{inLevel,levels=([args.pop(args.index(x)) for x in args if x.isdigit()]+[''])[0],{x.replace(' ',''):get(x.replace(' ','')) for x in get_raw().levels} }}
{{help=args and args[0] in "help?"}}
        {{showOpts=args and args[0] in "options"}}
{{viewSubs=args and args[0] in "view"}}
{{trySub=args and args[0] in "unsubscribe"}}
{{subscribe,unsubscribe=(args[1] if len(args[1])==36 else "") if len(args)>1 and args[0] in "subscribe" else "",(args[1] if len(args[1])==36 else "") if len(args)>1 and not args[0] in "subscribe" and args[0] in "unsubscribe" else ""}}
{{subs=defaults+load_json(get("subbed_classes",dump_json(defaults)))}}
{{uniqueSubs=list({x:"" for x in subs})}}
{{deletedGvar=[x for x in uniqueSubs if not get_gvar(x)]}}
{{uniqueSubs=[x for x in uniqueSubs if get_gvar(x)]}}
{{set_uvar("subbed_classes",dump_json(uniqueSubs+[subscribe])) if subscribe and not subscribe in uniqueSubs else set_uvar("subbed_classes",dump_json([x for x in uniqueSubs if x!=unsubscribe])) if (not subscribe and unsubscribe and len(uniqueSubs)>1) or deletedGvar else ""}}
<drac2>
classList=[]
for x in uniqueSubs:
  classList=classList+load_json(get_gvar(x))
</drac2>
{{subclassDict={f"{x.Class}Level":"" for x in classList if "hitDie" in x and x.Class!="ExampleClass"} }}
{{subclassDict.update(load_json(get("subclass","{}")))}}
{{namesList=list({x.Class:"" for x in classList if x.Class!="ExampleClass"})}}
{{subclassDict={x:subclassDict[x] for x in subclassDict if x[:-5] in namesList} }}
<drac2>
allCounters=[]
for x in classList:
  allCounters=allCounters+x.counters if x.Class!="ExampleClass" else allCounters
</drac2>
{{inClass="" if help or trySub or viewSubs else (args and ((([x for x in namesList if args[1 if showOpts and len(args)>1 else 0] in x.lower()])+[''])[0] or (err("**No class found matching that input.**\nUse `!level options` to see your available classes.\nIf using a homebrew class, see `!level ?` - **Better Brew Support**.") if showOpts and len(args)>1 or not showOpts else '')))}}
{{classLevel=f"{inClass}Level"}}
{{subclassesAvailable=[x.subclass for x in classList if "subclass" in x and inClass==x.Class]}}
{{inSubclass="" if showOpts or trySub or help or viewSubs or subscribe or unsubscribe else (((inClass and args.remove(args[0]))or args and inClass and([x for x in subclassesAvailable if' '.join(args)in x.lower()]+[''])[0]) or err(f"**No subclass found matching that input.**\nUse `!level options {inClass.lower()}` to see your available subclasses.\nIf using a homebrew subclass, see `!level ?` - **Better Brew Support**.")) if inClass and len(args)>1 else ""}}
{{subclassDict.update({classLevel:inSubclass}) if inClass and inSubclass else ""}}
{{numLevel=int(inLevel) if inLevel else levels.get(classLevel,0) if classLevel in levels else -1}}
{{any([help,numLevel<0,not inClass,classLevel in levels]) or set_cvar(classLevel,str(numLevel))}}
{{(numLevel==0 or (levels.get(classLevel)==numLevel)) and delete_cvar(classLevel)}}
{{levels.update({x:int(get(x))for x in get_raw().get("cvars",{}) if x in subclassDict})}}
{{countersToMake=[]}}
{{[[countersToMake.append(x) for x in y.counters if int(get(x.classLevel,0))>=x.level] for y in classList if get(f"{y.Class}Level") and y.get("subclass","") in subclassDict[f"{y.Class}Level"]] if not beyond else ''}}
{{oldFeatures=[]}}
{{removeOldFeatures=[(oldFeatures.append(feature.name) or delete_cc(feature.name)) if cc_exists(feature.name) else "" for feature in allCounters] if not beyond else [delete_cc(feature.name) if cc_exists(feature.name) else "" for feature in allCounters if feature.get('deprecated')]}}
<drac2>
for feature in countersToMake:
  existingValue=int(cc_exists(feature.name) and get_cc_max(feature.name))
  resetValue=feature.reset.split('$')
  reset=resetValue[0] if not '$' in feature.reset or int(get(feature.classLevel,numLevel))<int(resetValue[1]) else resetValue[2]
  create_cc(feature.name,0,max(existingValue if "noStacking" in feature else 1,1,int(feature.value[int(get(feature.classLevel))-(1 if len(feature.value)==20 else 0)] if typeof(feature.value)=='SafeList' else get(feature.value,feature.value)))+existingValue*(not "noStacking" in feature)+int("modifier" in feature and(feature.modifier[int(get(feature.classLevel))-(1 if len(feature.modifier)==20 else 0)] if typeof(feature.modifier)=='SafeList' else get(feature.modifier,feature.modifier))),reset,feature.display) if (typeof(feature.value)=='SafeList' and int(feature.value[int(get(feature.classLevel,0))-(1 if len(feature.value)==20 else 0)]) or typeof(feature.value)!='SafeList') and not feature.get('deprecated') else ''
</drac2>
{{[set_cc(feature.name,0) for feature in countersToMake if feature.get("zero")]}}
{{hitDict={"d6":0,"d8":0,"d10":0,"d12":0} }}
{{[hitDict.update({x.hitDie:hitDict.get(x.hitDie,0)+int(get(f"{x.Class}Level"))}) for x in classList if "hitDie" in x and get(f"{x.Class}Level")]}}
<drac2>
for x in hitDict:
  hitdieName=f"Hit Dice ({x})"
  delete_cc(hitdieName) if cc_exists(hitdieName) else ""
  create_cc_nx(hitdieName,0,hitDict[x]) if hitDict[x] else ""
</drac2>
{{madeCounters=[f"{feature.name} ({'Cap of ' if feature.get('zero') else ''}{get_cc_max(feature.name)}{f'/{get_raw().consumables.custom[feature.name].reset} rest' if get_raw().consumables.custom[feature.name].reset!='none' else '' if feature.get('zero') else ' total'})" for feature in countersToMake if cc_exists(feature.name) and not feature.name in oldFeatures]}}
{{madeCounters=list({x:"" for x in madeCounters})}}
{{classesString,hitdiceString,featuresString,newlyCreatedText="\n".join([f'{x[:-5]}{f" ({subclassDict.get(x)})" if subclassDict.get(x) else dagger if subclassDict.get(x,1)else""}: {levels[x]}' for x in levels if 'Lev' in x]) or "None","\n".join([f"{hitDict[x]}{x}"for x in hitDict if hitDict[x]]),"\n".join(madeCounters),'" -f "Newly Created Counters|'}}
{{shouldShowHelp=help or(not hitdiceString and not inClass in namesList and not [x for x in levels if "Lev" in x])}}
{{SUB=load_json(get_gvar(subscribe or unsubscribe)) if subscribe or unsubscribe else []}}
{{allInSub=list({x.Class:"" for x in SUB if x.Class!="ExampleClass"})}}
<drac2>
classesInSub=[]
for x in allInSub:
  numSubclasses=len([y for y in SUB if x==y.Class])-(1 if [j for j in SUB if j.Class==x and "hitDie" in j] else 0)
  classesInSub.append(f"{x} ({numSubclasses if numSubclasses!=1 else [k.subclass for k in SUB if k.Class==x and 'subclass' in k][0]}{' Subclasses' if numSubclasses!=1 else ''})")
</drac2>
{{classesInSub=', '.join(classesInSub)}}
<drac2>
subList=[]
classSubs={}
for z in uniqueSubs:
  subGvar=load_json(get_gvar(z))
  classesInThis=list({w.Class:"" for w in subGvar if w.Class!="ExampleClass"})
  theClasses=""
  theClassesList=[]
  for x in classesInThis:
    numSubs = len([y for y in subGvar if x==y.Class and not "hitDie" in y])
    # numSubs=len([y for y in subGvar if x==y.Class])-(1 if [j for j in subGvar if j.Class==x and "hitDie" in j] else 0)
    classSubs.update({x:numSubs+classSubs.get(x,0)})
    theClassesList.append(f"{x} ({numSubs if numSubs!=1 else [k.subclass for k in subGvar if k.Class==x and 'subclass' in k][0]}{' Subclasses' if numSubs!=1 else ''})")
  theClasses=', '.join(theClassesList)
  subList.append(f''' -f "{z}|**Class Options:** {theClasses[:945 if len(theClasses)>975 else 974]}{'... [truncated due to length]' if len(theClasses)>974 else ''}"''')
</drac2>
{{'' if inClass else ''.join(subList)+(f''' -f "Totals|{', '.join([f"{'and ' if x==namesList[-1] else ''}{classSubs.get(x,0)} {x} Subclass{'es' if classSubs.get(x,0)!=1 else ''}" for x in namesList if classSubs.get(x)])}."''' if len(uniqueSubs)>1 else '')+' -f "View available subclasses with `!level options <class>`"' if viewSubs else f'''-f "{subscribe or unsubscribe}|{classesInSub[:994]}{'... [truncated due to length]' if len(classesInSub)>1024 else ''}" -f "View available subclasses with `!level options <class>`"''' if subscribe or unsubscribe and len(uniqueSubs)>1 else ('''-desc "You need to enter a valid gvar address to subscribe or unsubscribe to."''' if len(args)>1 and len(args[1])!=36 else '''-desc "You must be subscribed to at least one class options list gvar."''') if args and args[0] in "unsubscribe" else ''''''}}
-title "{{"I'm sorry, " if args and args[0] in "unsubscribe" and not (subscribe or unsubscribe and len(uniqueSubs)!=1) else "" if help or showOpts or viewSubs or subscribe or unsubscribe else "Level Summary for "}}{{name if not help else ''}}{{("'s Subscriptions:" if get("subbed_classes") else "'s Available Class Options") if viewSubs else f"{' subscribed' if subscribe else ' unsubscribed'} to ..." if unsubscribe and len(uniqueSubs)>1 or subscribe else ". I'm afraid I can't let you do that." if args and args[0] in "unsubscribe" else "How to !level:" if help else ''}}"
{{'' if subscribe or unsubscribe or viewSubs or trySub else (f'''-f "{inClass} Options Available:|{', '.join(subclassesAvailable) or 'No subclasses found.'}"'''if inClass else f'''-f "Available Classes:|{', '.join(namesList)}"''') if showOpts else '-desc "[Get the workshop version.](https://avrae.io/dashboard/workshop/5f7385fe647bb0a416316d1d)"' if shouldShowHelp else f'''-f "Total Level|{level}" -f "Hit Dice|{hitdiceString or "None"}|inline" -f "Class Levels|{classesString}|inline{newlyCreatedText+featuresString if featuresString else ''}"'''}}
{{subclassLevels={f"{x.Class}Level":x.subclassLevel for x in classList if x.get("subclassLevel")} }}
{{'''-f "Don't forget your subclass!|One or more of your classes is high enough level to select a subclass, do so with `!level <class> <subclass>`."''' if any([int(get(x,-2))>=subclassLevels.get(x,0) and subclassDict[x]=="" for x in subclassDict]) and not (showOpts or help or viewSubs or subscribe or unsubscribe) else ""}}
{{' -f "Invalid Total Level|Your total class levels exceed your character level. Remember to `!update` your sheet with your new level."' if (int(level)<sum([int(get(x,0))for x in subclassDict])) and not (showOpts or help or viewSubs or subscribe or unsubscribe) else ""}}
{{''' -f "Unrecognized Class|One or more classes imported from your get_raw() is marked with a dagger (â€ ). This means `!level` doesn't recognize it and therefore cannot make counters or hit dice for it. You will have to set those up manually, add the class to your own custom gvar, or `subscribe` to a gvar that contains it. See `!level ?` **Better Brew Support** for guidance."''' if dagger in classesString and not (showOpts or help or viewSubs or subscribe or unsubscribe) else ''}}
{{f'-f "Warning: Deleted GVAR Found|{" & ".join(deletedGvar)} {"were" if len(deletedGvar)>1 else "was"} deleted before you unsubscribed to it. It has been removed from your `subbed_classes` uvar. If you know the owner of the gvar, yell at them for deleting something you were using."' if deletedGvar else ""}}
{{subclassDict={x:subclassDict[x] for x in subclassDict if get(x)} }}
{{set_cvar("subclass",dump_json(subclassDict))}}
-desc "[Get the workshop version.](https://avrae.io/dashboard/workshop/5f7385fe647bb0a416316d1d)"
-footer "Get the workshop version. The gvar that previously contained all of the class options is now SRD only. This is because the Workshop allows better handling of licensing. If you own the content on Beyond, you can sub to it. Also, this alias will not be receiving updates anymore ever. It will actually probably receive downdates if anything. In short, it is deprecated and you should switch to the workshop version by following the link."
-color <color>
-thumb <image>