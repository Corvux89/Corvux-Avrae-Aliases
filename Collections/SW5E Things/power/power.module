def processPower(args):
    a = argparse(args)
    ignore = a.get('i')
    wi = a.get('with')
    c = character()
    out = []
    point_list = [0,2,3,4,5,6,7,8,9,10]
    keyword = None if not args else args[0].lower()

    if not keyword:
        return "help power"

    fp = load_json(get_gvar("6269cf7a-0df9-4789-992c-29dbc20ac053"))
    tp = load_json(get_gvar("e45f68f5-96d4-4f52-96c8-862734dfa7ff"))

    # Find the power, and identify the type
    if c.cc_exists('Force Points') and not c.cc_exists("Tech Points") and not ignore:
        if spell := search(keyword, fp):
            cc = "Force Points"
            if not wi:
                out.append(getWith(spell))
        else:
            spell = None
    elif c.cc_exists("Tech Points") and not c.cc_exists("Force Points") and not ignore:
        if spell := search(keyword, tp):
            cc = "Tech Points"
        else:
            spell = None
    else:
        if spell := search(keyword, fp):
            cc = "Force Points"
            if not wi:
                out.append(getWith(spell))
        elif spell := search(keyword, tp):
            cc = "Tech Points"
        else:
            spell = None

    # Validation
    if spell is None:
        return err("I don't think that's a supported power. Make sure it is spelled correctly or let us know")
    if spell.name not in c.spellbook and spell.name.replace("(SW) ",'').lower() not in c.spellbook and not ignore:
        return err(f"I don't think you know {spell.name}.  Make sure it is added to your spellbook or try to cast it "
                   f"again with `-i` to ignore requirements. If you didn't intend to use {spell.name}, try "
                   f"using quotes around the power name.")

    # Figure out the cost
    spell_level = max(a.last('l', default=0, type_=int), spell.level)
    points = point_list[spell_level]

    if a.get('p'):
        points += int(a.last('p'))

    # Pay the cost
    if not ignore and c.get_cc(cc) < points:
        return err("You don't have enough {cc} to cast that power")
    c.mod_cc(cc, -points) if not ignore else ''
    args.remove(args[0])
    out.append(" ".join(args))
    out.append(f''' -f "{cc} (-{points})|{c.cc_str(cc)}" ''') if not ignore and not a.get('-h') else ''

    # Post Processing
    if cc == "Tech Points" and c.cc_exists("Personal Barrier") and not ignore and not a.get('h'):
        c.mod_cc("Personal Barrier", +points)
        out.append(f''' -f "Personal Barrier ({points})|{c.cc_str("Personal Barrier")}" ''')

    if a.get('dev'):
        return err(f'cast "{spell.name}" {" ".join(out)} -i')

    return f'cast "{spell.name}" {" ".join(out)} -i'

def search(keyword, gvar):
    sover = f"(SW) {keyword}"
    spell = ""

    for s in gvar:
        if keyword == s.name.lower() or sover == s.name.lower() or keyword in s.name.lower():
            spell = s
            break

    return spell

def getWith(spell):
    c = character()
    var = get_svar("sw5e", None)
    var = None if not var else load_json(var)
    ovr = None if not var else var["castMod"]

    if ovr:
        return f'-with {ovr}'
    elif "light" in spell.classes.lower():
        return '-with wis'
    elif "dark" in spell.classes.lower():
        return '-with cha'
    elif c.stats.wisdom > c.stats.charisma:
        return '-with wis'
    else:
        return '-with cha'