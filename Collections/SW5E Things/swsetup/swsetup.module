# SWSetup Module

ch = character()
image = ch.image
color = ch.csettings.color
gvars = ['0ed9e086-f3ed-4e1b-83f4-1d18e2276f1b']
add_gvars = ['ca3279fd-537e-477b-a2b6-e9c45f1f1939']
add_gvars += load_json(get_svar("swActions", "[]"))
char_classes = load_json(ch.get_cvar("subclass", "{}"))
stats = ["strength", "dexterity", "constitution", "intelligence", "wisdom", "charisma"]
actionTracker = load_json(ch.get_cvar("swActionMods", "{}"))

def setup(args):
    args = [x.lower() for x in args]
    dev = True if argparse(args).get('dev') else False
    stat = argparse(args).last('stat')

    if stat:
        stat = f'{[x for x in stats if stat.lower() in x][0]}Mod'

    class_ref = getClass()
    out = getAttacks(class_ref, stat)
    out += additionalActions(stat)

    return f"a import {out}"

def getClass():
    class_list = []

    for g in gvars:
        classes = load_json(get_gvar(g))
        for c in classes:
            if not c.get("subclass"):
                if c.Class.lower() in [x.replace("Level","").lower() for x in char_classes]:
                    class_list.append(c)
            elif c.get("subclass") and char_classes.get(f"{c.Class}Level") == c.get("subclass"):
                class_list.append(c)

    return class_list

def getAttacks(class_list, stat = None):
    attacks = []

    for cl in class_list:
        level = ch.levels.get(cl.Class) or ch.get_cvar(f"{cl.Class}Level",0)

        for a in cl.attacks:
            if int(level) >= int(a.level):
                attacks = [x for x in attacks if x.get('name') != a.action.get("name")]  # Allow for subclass overrides
                action = a.action
                if stat:
                    action = load_json(dump_json(action).replace('max(wisdomMod,charismaMod)', stat).replace('wisdomMod', stat).replace('charismaMod', stat))
                attacks.append(action)

    return attacks

def additionalActions(stat = None):
    a_str = ""
    actions = []
    modCounters = actionTracker.get('counters', [])
    modVars = actionTracker.get('cvars', [])
    for i_action in ch.attacks:
        if i_action.name == "zCustomImport":
            a_str = i_action.raw["automation"][1]["text"].lower().split("\n")[1].split(", ")
            break

    for g in add_gvars:
        add_actions = load_json(get_gvar(g))

        for a in add_actions:
            if a.name.lower() in a_str:
                if a.get('level') and ch.levels.total_level < int(a.level):
                    break

                if a.get("action"):
                    action = a.action
                    if stat:
                        action = load_json(dump_json(action).replace('max(wisdomMod,charismaMod)', stat).replace('wisdomMod',stat).replace('charismaMod', stat))
                    actions.append(action)

                # Add a counter
                if a.get("counter"):
                    addCounter(a.counter)

                # Modify a counter
                if a.get("modCounter") and a.name not in modCounters:
                    modCounters.append(a.name)
                    modCounter(a.modCounter)

                # Update a CVAR
                if a.get("cvar") and a.name not in modVars:
                    modVars.append(a.name)
                    modCVAR(a.cvar)

    actionTracker["counters"] = modCounters
    actionTracker["cvars"] = modVars
    ch.set_cvar("swActionMods", dump_json(actionTracker))
    return actions

def addCounter(counter):
    level = ch.levels.total_level if not counter.get('level') else max(ch.levels.get(counter.level,0), ch.levels.get(f'{counter.level}light',0), ch.levels.get(f'{counter.level}dark',0))

    if int(level) == 0:
        return

    # Max Value
    max_value = counter.value[level - 1] if typeof(counter.value) == 'SafeList' else counter.value.replace('{level}', str(level)) if typeof(counter.value) == 'str' else counter.value

    # Max Value Modifier
    modifier = counter.modifier if 'modifier' in counter else 0
    modifier = modifier[level - 1] if typeof(modifier) == 'SafeList' else modifier

    # Reset On
    reset = counter.reset.split('$')
    reset = reset[0] if not '$' in counter.reset or level < int(reset[1]) else reset[2]

    # Create the counter
    ch.create_cc(counter.name, 0, f"{max_value}+{modifier}", reset, counter.display, counter.get('reset_to'), None,
                 None, counter.get('desc'))

def modCounter(counter):
    totalLevel = ch.levels.total_level
    if ch.cc_exists(counter.name):
        cc = ch.cc(counter.name)
        modifier = counter.modifier if 'modifier' in counter else 0
        modifier = modifier[totalLevel - 1] if typeof(modifier) == 'SafeList' else modifier
        ch.create_cc(counter.name, cc.min, f"{cc.max}+{modifier}", cc.reset_on, cc.display_type, cc.reset_to,
                     cc.reset_by, cc.title, cc.desc, f"{cc.value}+{modifier}")
def modCVAR(cvar_ref):
    cvar = load_json(ch.get_cvar(cvar_ref.name, cvar_ref.get('default',"[]")))
    if 'node' in cvar_ref:
        base_val = cvar.get(cvar_ref.node)
    else:
        base_val = cvar

    if not base_val:
        base_val = [] if 'append' in cvar_ref else 0 if 'modifier' in cvar_ref else ""

    if 'value' in cvar_ref:
        base_val = cvar_ref.value
    elif 'modifier' in cvar_ref:
        base_val += int(cvar_ref.modifier)
    elif 'append' in cvar_ref and cvar_ref.append not in base_val:
        base_val.append(cvar_ref.append)

    if 'node' in cvar_ref:
        cvar[cvar_ref.node] = base_val
    else:
        cvar = base_val

    ch.set_cvar(cvar_ref.name, dump_json(cvar))