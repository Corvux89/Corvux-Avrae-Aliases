<drac2>
c = character()
com = combat()
a = argparse(&ARGS&)
targ = a.get('t')
cover = &ARGS&[0]
dur = 1

if not cover:
    return f'''help {ctx.alias} -here'''

base = f'''embed -thumb {image} -color {color}'''

if cover.lower() in ['quart', 'quarter', '1/4', 'q']:
    effect="One-Quarter Cover"
    desc="A target with one-quarter cover has a +2 bonus to AC and Dexterity saving throws. A target has one-quarter cover if an obstacle blocks at least one-fourth of its body, such as a thin pillar or a creature of one size category smaller."
    peffect={
        "ac_bonus": 2
    }
elif cover.lower() in ['half', '1/2', 'h']:
    effect="Half Cover"
    desc="A target with half cover has a +3 bonus to AC and Dexterity saving throws. A target has half cover if an obstacle blocks at least half of its body, such as a low wall or a creature of the same size category."
    peffect={
        "ac_bonus": 3
    }
elif cover.lower() in ['three', '3', '3/4', 't']:
    effect="Three-Quarter Cover"
    desc="A target with three-quarters cover has a +5 bonus to AC and Dexterity saving throws. A target has three-quarter cover if about three-quarters of it is obstructed, whether by an obstacle or a creature of one size category larger."
    peffect={
        "ac_bonus": 5
    }
elif cover.lower() in ['total', 'complete', 'full', 'f']:
    effect="Full Cover"
    desc="A target with total cover canâ€™t be targeted directly by an attack or a power, although some powers can reach such a target by including it in an area of effect. A target has total cover if it is completely concealed by an obstacle."
    peffect={}
elif cover.lower() in ['none', 'clear']:
    effect = None
else:
    return f'''help {ctx.alias} -here'''

if com:
    if targ:
        try:
            targs = [com.get_combatant(x) for x in targ]
        except:
            err(f"Invalid Target in loop")
    else:
        targs = [com.me]

    for t in targs:
        if not t:
            return err(f"Invalid Target")
        if effect:
            eff = t.add_effect(effect, duration=dur, desc=desc, passive_effects=peffect)
            base += f''' -f "{t.name}|{eff}" '''
        else:
            t.remove_effect("Cover")
            base += f''' -f "{t.name}|Revealed!" '''

    if len(targs) > 1:
        if effect:
            base += f''' -title "Multiple targets take {effect}" '''
        else:
            base += f''' -title "Multiple targets are revealed!" '''
    else:
        if effect:
            base += f''' -title "{targs[0].name} takes {effect}" '''
        else:
            base += f''' -title "{targs[0].name} is revealed!" '''

else:
    if targ:
        for t in targ:
            if effect:
                base += f''' -f "{t}|{effect}" '''
            else:
                base += f''' -f "{t}|Revealed!" '''
    else:
        if effect:
            base += f''' -title "{name} takes {effect}" '''
        else:
            base += f''' -title "{name} is revealed!" '''

    if targ:
        if effect:
            base += f''' -title "{'Multiple targets' if len(targ) > 1 else targ[0]} take {effect}" '''
        else:
            base += f''' -title "{'Multiple targets' if len(targ) > 1 else targ[0]} are revealed!" '''
    else:
        if effect:
            base += f''' -title "{name} takes {effect}" '''
        else:
            base += f''' -title "{name} is revealed!" '''

if effect:
    base += f''' -desc "{desc}" '''
else:
    base += f''' -f "Effect|Cover removed" '''

return base

</drac2>