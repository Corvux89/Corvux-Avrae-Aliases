# SWEQUIP Additional Weapons Module

using(sup="8b78365a-5c05-4c8f-8364-fbde2e3de862")
ch = character()

def biting(attack, args):
    biting = None
    dmg = sup.get_damage_str(attack)
    dc = 13 if args.last('biting') == 'True' else int(args.last('biting'))
    attack = attack.replace(f'{sup.get_damage_type(dmg)}', 'acid')
    a = load_json(attack)
    prop = sup.getProperties(attack)
    effect = {"type": "ieffect2", "name": "Disintegrated",
              "desc": "Dies immediately without making death saving throws.\n - A disintegrated creature and everything "
                      "unenhanced it is wearing or carrying are reduced to a pile of fine gray dust. A creature "
                      "destroyed in this way can not be revitalized."}

    if 'range' and 'reload' not in prop:
        auto = sup.get_on_hit_effects(attack)
        condition = {"type": "condition",
                     "condition": "target.hp <= 0 and lastSaveRollTotal < 13",
                     "onTrue": [effect],
                     "onFalse": []}
        text = {"type": "text", "title": "Biting", "text": "When you would make a melee weapon attack with a weapon with the biting property, you can instead force the target to make a Constitution saving throw (DC = 8 + your bonus to attacks with the weapon, or the biting number, whichever is lower). If you would have advantage on your attack roll, the creature instead has disadvantage on their saving throw, and if you would have disadvantage on your attack roll, the creature instead has advantage on their saving throw. On a failed save, the target takes normal weapon damage and is subjected to any additional effects that would occur on a hit, and the first attack it makes before the end of its next turn has disadvantage."}
        auto.append(condition)
        auto.append(text)
        save = {"type": "save", "stat": "con", "dc": f"{dc}", "fail": auto, "success": []}
        target = {"type": "target", "target": "each", "effects": [save]}
        biting = {"name": f"Biting - {a.name}", "_v": 2, "automation": [target]}
        biting = dump_json(biting)

    save = {"type": "save", "stat": "con", "dc": f"{dc}", "fail": [effect], "success": []}
    condition = {"type": "condition", "onFalse": []}

    if '"stat": "con"' in attack:
        condition["condition"] = "target.hp <= 0 and lastSaveRollTotal < 13"
        condition["onTrue"] = [effect]
    else:
        condition["condition"] = "target.hp <= 0"
        condition["onTrue"] = [save]

    for n in a.automation:
        if n.type == "target":
            for e in n.effects:
                if ('burst' or 'rapid' in a.name.lower()) and e.type == "save":
                    e.fail.append(condition)
                elif e.type == "attack":
                    e.hit.append(condition)
                    break

    return dump_json(a), biting

def bright(attack, args):
    bright = None
    dmg = sup.get_damage_str(attack)
    dc = 13 if args.last('bright') == 'True' else int(args.last('bright'))
    attack = attack.replace(f'{sup.get_damage_type(dmg)}', 'fire')
    a = load_json(attack)
    prop = sup.getProperties(attack)

    if 'range' and 'reload' not in prop:
        auto = sup.get_on_hit_effects(attack)
        text = {"type": "text","title": "Bright", "text": "When you would make a melee weapon attack with a weapon with the bright property, you can instead force the target to make a Dexterity saving throw (DC = 8 + your bonus to attacks with the weapon, or the bright number, whichever is lower). If you would have advantage on your attack roll, the creature instead has disadvantage on their saving throw, and if you would have disadvantage on your attack roll, the creature instead has advantage on their saving throw. On a failed save, the target takes normal weapon damage and is subjected to any additional effects that would occur on a hit, and the creature takes additional damage of the same type at the start of its next turn equal to your governing ability modifier."}
        auto.append(text)
        save = {"type": "save", "stat": "dex", "dc": f"{dc}", "fail": auto, "success": []}
        target = {"type": "target", "target": "each", "effects": [save]}
        bright = {"name": f"Bright - {a.name}", "_v": 2, "automation": [target]}
        bright = dump_json(bright)

    return dump_json(a), bright

def corruption(attack, args):
    corrupt = None
    dmg = sup.get_damage_str(attack)

    dc = min(13,8+int(sup.replace_mod(sup.get_attack_bonus(attack)))) if args.last('corruption') == 'True' else int(args.last('corruption'))
    attack = attack.replace(f'{sup.get_damage_type(dmg)}', 'necrotic')
    a = load_json(attack)

    prop = sup.getProperties(attack)

    if 'range' and 'reload' not in prop:
        auto = sup.get_on_hit_effects(attack)
        effect = {"type": "ieffect2", "name": "Corruption", "tick_on_caster": True, "duration": 1, "desc": "Cannot regain hit points"}
        text = {"type": "text","title": "Corruption", "text": "When you would make a melee weapon attack with a weapon with the corruption property, you can instead force the target to make a Wisdom saving throw (DC = 8 + your bonus to attacks with the weapon, or the corruption number, whichever is lower). If you would have advantage on your attack roll, the creature instead has disadvantage on their saving throw, and if you would have disadvantage on your attack roll, the creature instead has advantage on their saving throw. On a failed save, the target takes normal weapon damage and is subjected to any additional effects that would occur on a hit, and the creature cannot regain hit points until the start of your next turn."}
        auto.append(effect)
        auto.append(text)
        save = {"type": "save", "stat": "wis", "dc": f"{dc}", "fail": auto, "success": []}
        target = {"type": "target", "target": "each", "effects": [save]}
        corrupt = {"name": f"Corrupt - {a.name}", "_v": 2, "automation": [target]}
        corrupt = dump_json(corrupt)

    return dump_json(a), corrupt

def disarming(attack, args):
    dc = f'8+{sup.get_attack_bonus(attack)}' if args.last('disarming') == 'True' else int(args.last('disarming'))
    a = load_json(attack)

    text = {"type": "text","title": "Disarming", "text": "When you score a critical hit with a weapon with the disarming property against a creature that is holding an object, you can attempt to disarm the target (no action required). If the target is no more than one size larger than you (your size or smaller if your weapon has the light property), it must succeed on a Strength saving throw (DC = 8 + your bonus to attacks with the weapon) or it drops an object of your choice at its feet."}
    save = {"type": "save", "stat": "str", "dc": f"{dc}", "fail": [], "success": []}
    condition = {"type": "condition", "condition": "lastAttackDidCrit == True", "onTrue": [save, text], "onFalse": []}

    for e in a.automation:
        if e.type == "target":
            for i in e.effects:
                if i.type == "attack":
                    i['hit'].append(condition)
                    break

    return dump_json(a)

def disintegrate(attack, args):
    dc = 13 if args.last('disintegrate') == 'True' else int(args.last('disintegrate'))
    a = load_json(attack)

    text = {"type": "text", "title": "Disintegrate", "text": "When a creature is reduced to 0 hit points by a weapon with the disintegrate property, it must make a Constitution saving throw, DC equal to the disintegrate number. On a failed save, it dies immediately without making death saving throws. A disintegrated creature and everything unenhanced it is wearing or carrying are reduced to a pile of fine gray dust. A creature destroyed in this way can not be revitalized."}
    effect = {"type": "ieffect2", "name": "Disintegrated",
              "desc": "Dies immediately without making death saving throws.\n - A disintegrated creature and everything "
                      "unenhanced it is wearing or carrying are reduced to a pile of fine gray dust. A creature "
                      "destroyed in this way can not be revitalized."}

    save = {"type": "save", "stat": "con", "dc": f"{dc}", "fail": [effect], "success": []}
    condition = {"type": "condition", "onFalse": []}

    if '"stat": "con"' in attack:
        condition["condition"] = "target.hp <= 0 and lastSaveRollTotal < 13"
        condition["onTrue"] = [effect, text]
    else:
        condition["condition"] = "target.hp <= 0"
        condition["onTrue"] = [save, text]

    for n in a.automation:
        if n.type == "target":
            for e in n.effects:
                if ('burst' or 'rapid' in a.name.lower()) and e.type == "save":
                    e.fail.append(condition)
                elif e.type == "attack":
                    e.hit.append(condition)
                    break

    return dump_json(a)

def neuralizing(attack, args):
    dc = 13 if args.last('neuralizing') == 'True' else int(args.last('neuralizing'))
    a = load_json(attack)

    text = {"type": "text", "title": "Neuralizing",
            "text": "When you hit a creature with a weapon with the neuralizing property, you can force it to make a Wisdom saving throw, DC equal to the neuralizing number. On a failed save, the creature takes an additional 1d4 psychic damage and becomes frightened of you until the start of its next turn."}
    effect = {"type": "ieffect2", "name": "Frightened",
              "desc": "A frightened creature has disadvantage on ability checks and attack rolls while the source of its fear is within line of sight.\n - The creature canâ€™t willingly move closer to the source of its fear.\n - Source: {name}",
              "duration": 1}
    damage = {"type": "damage", "damage": "1d4 [psychic]"}

    save = {"type": "save", "stat": "wis", "dc": f"{dc}", "fail": [damage, effect], "success": []}

    for n in a.automation:
        if n.type == "target":
            for e in n.effects:
                if ('burst' or 'rapid' in a.name.lower()) and e.type == "save":
                    e.fail.append(save)
                    e.fail.append(text)
                elif e.type == "attack":
                    e.hit.append(save)
                    e.hit.append(text)
                    break

    return dump_json(a)

def shocking(attack, args):
    dc = 13 if args.last('shocking') == 'True' else int(args.last('shocking'))
    a = load_json(attack)

    text = {"type": "text", "title": "Shocking",
            "text": "When you hit a creature with a weapon with the shocking property, you can force it to make a Dexterity saving throw, DC equal to the shocking number. On a failed save, the creature takes an additional 1d4 lightning damage and becomes shocked until the end of its next turn."}
    effect = {"type": "ieffect2", "name": "Shocked",
              "desc": "A shocked creature canâ€™t take reactions.\n - On its turn, a shocked creature can take either an action or a bonus action, but not both.",
              "duration": 1,
              "end": True}
    damage = {"type": "damage", "damage": "1d4 [lightning]"}

    save = {"type": "save", "stat": "dex", "dc": f"{dc}", "fail": [damage, effect], "success": []}

    for n in a.automation:
        if n.type == "target":
            for e in n.effects:
                if ('burst' or 'rapid' in a.name.lower()) and e.type == "save":
                    e.fail.append(save)
                    e.fail.append(text)
                elif e.type == "attack":
                    e.hit.append(save)
                    e.hit.append(text)
                    break

    return dump_json(a)

def sonorous(attack, args):
    dc = 13 if args.last('sonorous') == 'True' else int(args.last('sonorous'))
    a = load_json(attack)

    text = {"type": "text", "title": "Sonorous",
            "text": "When you hit a creature with a weapon with the sonorous property, you can force it to make a Constitution saving throw, DC equal to the sonorous number. On a failed save, the creature takes an additional 1d4 sonic damage and becomes deafened until the end of its next turn."}
    effect = {"type": "ieffect2", "name": "Deafened",
              "desc": "A deafened creature canâ€™t hear and automatically fails any ability check that requires hearing.",
              "duration": 1,
              "end": True}
    damage = {"type": "damage", "damage": "1d4 [sonic]"}

    save = {"type": "save", "stat": "dex", "dc": f"{dc}", "fail": [damage, effect], "success": []}

    for n in a.automation:
        if n.type == "target":
            for e in n.effects:
                if ('burst' or 'rapid' in a.name.lower()) and e.type == "save":
                    e.fail.append(save)
                    e.fail.append(text)
                elif e.type == "attack":
                    e.hit.append(save)
                    e.hit.append(text)
                    break

    return dump_json(a)

def burst(attack, args):
    a = load_json(attack)
    dmg = sup.get_damage_str(attack)
    bNum = 2 if args.last('burst') == 'True' else int(args.last('burst'))
    dc = f"8+{sup.get_attack_bonus(attack)}"
    on_hit = sup.get_on_hit_effects(attack)

    for e in on_hit:
        if e.type=="damage":
            e["damage"] = "{damage}"
            break
    save = {"type": "save", "stat": "dex", "fail": on_hit, "success": [], "dc": f"{dc}"}
    target = {"type": "target", "target": "all", "effects": [save]}
    counter = {"type": "counter", "counter": f"{sup.processName(a.name)}", "amount": f"{bNum}", "allowOverflow": False, "errorBehavior": "raise"}
    damage = {"type": "roll", "dice": f"{dmg}", "name": "damage"}
    text = {"type": "text", "text": f"{sup.getProperties(attack)}, burst {bNum}"}

    burst = {"name": f"Burst - {a.name}", "_v": 2, "automation": [damage, target, counter, text]}

    if args.get('gunstyle'):
        burst, new = gunning_style(dump_json(burst), args)
        burst = [load_json(burst), load_json(new)]
    else:
        burst = [burst]

    return dump_json(burst)

def rapid(attack, args):
    a = load_json(attack)
    rNum = 2 if args.last('rapid') == 'True' else int(args.last('rapid'))
    dc = f"8+{sup.get_attack_bonus(attack)}" if not args.get('dc') else int(args.last('dc'))
    dtype = sup.get_damage_type(sup.get_damage_str(attack))
    die = sup.get_damage_die(attack)

    numDie = die[:die.find('d')]
    dieType = die[die.find('d')+1:]
    d_str = f"{int(numDie)*2}d{dieType}" + "+{dexterityMod}" + f" [{dtype}]"
    on_hit = sup.get_on_hit_effects(attack)
    for e in on_hit:
        if e.type=="damage":
            e["damage"] = d_str
            break
    counter = {"type": "counter", "counter": f"{sup.processName(a.name)}", "amount": f"{rNum}", "allowOverflow": False,
               "errorBehaviour": "raise"}
    on_hit.append(counter)
    save = {"type": "save", "stat": "dex", "fail": on_hit, "success": [], "dc": f"{dc}"}
    target = {"type": "target", "target": "all", "effects": [save]}
    text = {"type": "text", "text": f"{sup.getProperties(attack)}, rapid {rNum}"}

    rapid = {"name": f"Rapid - {a.name}", "_v": 2, "automation": [target, text]}

    if args.get('gunstyle'):
        rapid, new = gunning_style(dump_json(rapid), args)
        rapid = [load_json(rapid), load_json(new)]
    else:
        rapid = [rapid]

    return dump_json(rapid)

def staggering(attack, args):
    dc = 13 if args.last('staggering') == 'True' else int(args.last('staggering'))
    a = load_json(attack)

    text = {"type": "text", "title": "Staggering Oscillator",
            "text": "When you hit with the weapon, you can force the target to make a DC 13 Strength saving throw. On a failed save, the creature is pushed back 10 feet and knocked prone.\nOnce youâ€™ve used this feature, you must complete a short or long rest before you can use it again."}
    effect = {"type": "ieffect2", "name": "Prone",
              "buttons": [{"label": "Stand Up", "verb": "stands up", "automation": [{"type": "remove_ieffect"}]}],
              "duration": 1}

    save = {"type": "save", "stat": "str", "dc": f"{dc}", "fail": [effect], "success": []}

    for n in a.automation:
        if n.type == "target":
            for e in n.effects:
                if ('burst' or 'rapid' in a.name.lower()) and e.type == "save":
                    e.fail.append(save)
                    e.fail.append(text)
                elif e.type == "attack":
                    e.hit.append(save)
                    e.hit.append(text)
                    break

    return dump_json(a)

def igniting(attack, args):
    a = load_json(attack)
    ignite = "1d4" if args.last('igniting') == 'True' else args.last('igniting')
    damage = {"type": "damage", "damage": f"{ignite} [fire]"}
    tdamage = {"type": "target", "target": "self", "effects": [damage]}
    eot = {"label": "Ignited - End of Turn", "verb": "burns!", "style": 4, "automation": [tdamage]}

    tdrop = {"type": "remove_ieffect"}
    drop = {"label": "Put out the fire", "verb": "is not longer ignited!", "style": 1, "automation": [tdrop]}

    effect = {"type": "ieffect2", "name": "ignited", "buttons": [eot, drop], "desc": "A creature that is ignited suffers fire damage at the end of each of its turns. A damage value in parentheses appears with this conditionâ€”the fire damage the creature takes at the end of its turn.\n - If the target or a creature within 5 feet of it uses an action to put out the flames, or if some other effect douses the flames, the creature is no longer ignited."}
    text = {"type": "text", "text": f"A creature that is ignited suffers {damage} fire damage at the end of each of its turns. A damage value in parentheses appears with this conditionâ€”the fire damage the creature takes at the end of its turn.\n\nIf the target or a creature within 5 feet of it uses an action to put out the flames, or if some other effect douses the flames, the creature is no longer ignited."}

    for n in a.automation:
        if n.type == "target":
            for e in n.effects:
                if ('burst' or 'rapid' in a.name.lower()) and e.type == "save":
                    e.fail.append(effect)
                    e.fail.append(text)
                elif e.type == "attack":
                    e.hit.append(effect)
                    e.hit.append(text)
                    break

    return dump_json(a)

def cooldown(attack, args):
    a = load_json(attack)
    prop = sup.getProperties(attack)
    reload = int(prop[prop.index("overheat "):].lstrip("overheat ")[:2].rstrip(", "))

    counter = {"type": "counter", "counter": sup.processName(a.name), "amount": f"-{reload}", "errorBehaviour": "ignore", "allowOverflow": True}

    attack = {"name": f"Cooldown - {sup.processName(a.name)}", "automation": [counter], "verb": "cools down", "_v": 2}

    return dump_json(attack)

def penetrating(attack, args):
    a = load_json(attack)
    pNum = 2 if args.last('penetrating') == 'True' else int(args.last('penetrating'))
    on_hit = sup.get_on_hit_effects(attack)

    counter = {"type": "counter", "counter": f"{sup.processName(a.name)}", "amount": f"{pNum}", "allowOverflow": False,
               "errorBehaviour": "raise"}
    atk = {"type": "attack", "attackBonus": f"{sup.get_attack_bonus(attack)}", "hit": on_hit, "miss": []}
    condition2 = {"type": "condition", "condition": "lastAttackDidHit and lastAttackRollTotal > target.ac", "onTrue": on_hit, "onFalse": []}

    condition1 = {"type": "condition", "condition": "targetNumber == 1", "onTrue": [atk], "onFalse": [condition2]}
    text = {"type": "text", "text": f"{sup.getProperties(attack)}, penetrating {pNum}"}

    target = {"type": "target", "target": "each", "effects": [condition1]}

    penetrating = {"name": f"Penetrating - {a.name}", "_v": 2, "automation": [target, counter, text]}

    if a.get("extra_crit_damage"):
        penetrating["extra_crit_damage"] = a.get("extra_crit_damage")

    if a.get("criton"):
        penetrating["criton"] = a.get("criton")

    return dump_json(penetrating)

def vicious(attack, args):
    a = load_json(attack)
    damage = sup.get_damage_str(attack)
    vNum = 1 if args.last('vicious') == 'True' else int(args.last('vicious'))
    dtype = sup.get_damage_type(damage)

    dmg = {"type": "damage", "damage": f"{vNum} [{dtype}]"}
    target = {"type": "target", "target": "each", "effects": [dmg]}

    vicious = {"name": f"Vicious - {a.name}", "_v": 2, "automation": [target]}

    return dump_json(vicious)

def disruptive(attack, args):
    a = load_json(attack)

    text = {"type": "text", "title": "Disruptive Property", "text": "When a creature is forced to make a Constitution saving throw to maintain concentration due to taking damage from a weapon with the disruptive property, the DC for the check equals 10 or the full damage taken, whichever number is higher, instead of only half."}

    for n in a.automation:
        if n.type == "target":
            for e in n.effects:
                if ('burst' or 'rapid' in a.name.lower()) and e.type == "save":
                    e.fail.append(text)
                elif e.type == "attack":
                    e.hit.append(text)
                    break

    return dump_json(a)


def blade_storm(attack, level, args):
    a = load_json(attack)
    damage = sup.get_damage_die(attack)
    dmg_str = sup.get_damage_str(attack)
    kcd = "1d4" if level < 5 else "1d6" if level < 9 else "1d8" if level < 13 else "1d10" if level < 17 else "1d12"
    new_str = dmg_str.replace(damage, kcd)
    attack = attack.replace(dmg_str,new_str)
    on_hit = sup.get_on_hit_effects(attack)

    atk = {"type": "attack", "attackBonus": f"{sup.get_attack_bonus(attack)}", "hit": on_hit, "miss": []}
    target = {"type": "target", "target": "each", "effects": [atk]}
    text = {"type": "text", "title": "Blade Storm", "text": "Your bursts become even more overwhelming. Once on your turn, when a creature takes damage from you twice, you can immediately make one additional attack against that creature (no action required). This attack uses your Kinetic Combat die instead of the weaponâ€™s damage die."}

    blade_storm = {"name": f"Blade Storm - {a.name}", "_v": 2, "automation": [target, text]}

    return dump_json(blade_storm)

def gunning_style(attack, args):
    a = load_json(attack)
    dmg_str = sup.get_damage_str(attack)
    die = sup.get_damage_die(attack)
    numDie = ceil(int(die[:die.find('d')])/2)
    dieType = int(die[die.find('d')+1:])
    counter = sup.get_counter(attack)
    dc = sup.get_save_dc(attack)
    gun_str = dmg_str.replace(f'{die}', f"({numDie}d{dieType}, {numDie}d{dieType})kh1")
    max_str = dmg_str.replace(f'{dieType}', f'{dieType}mi{dieType}')
    fail, save = sup.get_on_save_effects(attack)
    con_fail, con_save = sup.get_on_save_effects(attack)
    gun_fail, gun_save = sup.get_on_save_effects(attack)

    for e in con_fail:
        if e.type == "damage":
            e["damage"] = max_str
            break

    for f in gun_fail:
        if f.type == "damage":
            f["damage"] = gun_str
            break

    for g in gun_save:
        if g.type == "damage":
            g["damage"] = gun_str
            break

    condition = {"type": "condition", "condition": "lastSaveNaturalRoll <= 1", "onTrue": con_fail, "onFalse": fail}
    save = {"type": "save", "stat": "dex", "dc": dc, "fail": [condition], "success": save}
    target = {"type": "target", "target": "all", "effects": [save]}
    text = {"type": "text", "text": f"{sup.getProperties(attack)}"}


    base_attack = {"name": a.name, "_v": 2, "automation": [target, text]}

    if counter:
        base_attack["automation"].append(counter)

    condition = {"type": "condition", "condition": "lastSaveNaturalRoll <= 1", "onTrue": con_fail, "onFalse": gun_fail}
    save = {"type": "save", "stat": "dex", "dc": dc, "fail": [condition], "success": gun_save}
    target = {"type": "target", "target": "all", "effects": [save]}
    text = {"type": "text", "text": f"{sup.getProperties(attack)}"}

    gun_attack = {"name": f'Gunning - {a.name}', "_v": 2, "automation": [target, text]}

    if counter:
        base_attack["automation"].append(counter)

    return dump_json(base_attack), dump_json(gun_attack)

def ideal_of_the_steadfast(attack, args):
    a = load_json(attack)
    dc = f"8+{sup.get_attack_bonus(attack)}" if not args.get('dc') else int(args.last('dc'))
    on_hit = sup.get_on_hit_effects(attack)
    dmg_str = sup.get_damage_str(attack)
    dmg_type = sup.get_damage_type(dmg_str)
    max_dmg = sup.get_max_roll(dmg_str)
    max_dmg_str = f"{max_dmg} [{dmg_type}]"
    max_dmg_on_hit = load_json(dump_json(on_hit).replace(f'{dmg_str}', f'{max_dmg_str}'))

    # Save Attack
    save = {"type": "save", "stat": "dex", "dc": dc, "fail": on_hit, "success": []}
    target = {"type": "target", "target": "each", "effects": [save]}
    text = {"type": "text", "text": "When you would make a melee weapon attack roll, you can instead force the target to make a Dexterity saving throw (DC = 8 + your bonus to attacks with the weapon). If you would have advantage on your attack roll, the creature instead has disadvantage on their saving throw, and if you would have disadvantage on your attack roll, the creature instead has advantage on their saving throw. On a failed save, the target takes normal weapon damage and is subjected to any additional effects that would occur on a hit.",
            "title": "Ideal of the Steadfast"}

    save_attack = {"name": f"Ideal of the Steadfast - {a.name}", "_v": 2, "automation": [target, text]}

    surge_condition = {"type": "condition", "condition": "lastSaveNaturalRoll == 1", "onTrue": max_dmg_on_hit, "onFalse": on_hit}
    surge_save = {"type": "save", "stat": "dex", "dc": dc, "fail": [surge_condition], "success": [{"type": "damage", "damage": f"({dmg_str})/2 [{dmg_type}]"}]}
    surge_attack = {"name": f"Surge of Energy - Ideal of the Steadfast - {a.name}", "_v": 2, "automation": [{"type": "target", "target": "each", "effects": [surge_save]}]}

    ba_attack = {"name": f"Manifest - {a.name}", "_v": 2, "activation_type": 3,
                 "automation": [
                     {
                         "type": "target",
                         "target": "self",
                         "effects": [
                             {
                                 "type": "ieffect2",
                                 "name": "Ideal of the Steadfast - Surge of Energy",
                                 "duration": 10,
                                 "attacks": [{"attack": surge_attack}]
                             }
                         ]
                     },
                     {
                         "type": "text",
                         "text": "Additionally, as a bonus action, you can manifest this ideal in a brief surge of energy. For the next minute, when a creature succeeds on the saving throw, they take half the normal weapon damage, and when a creature rolls a 1 on the saving throw, they treat the damage as if you had rolled the maximum.",
                         "title": "Ideal of the Steadfast"
                     }
                 ]}

    return dump_json([save_attack, ba_attack])

def byrothsis_lightweapon(attack, args):
    a = load_json(attack)
    dmg_str = sup.get_damage_str(attack)
    dmg_type = sup.get_damage_type(dmg_str)

    damage = {"type": "damage", "damage": f"something [{dmg_type}]"}
    target = {"type": "target", "target": "all", "effects": [{damage}]}

    if args.get('byran'):
        desc = {"type": "text", "text": "When this weapon is levitated by the Force to deal damage through a class feature or force power you use, it deals additional damage equal to twice the damage dice of the weapon.", "title": "Byrothsis Ancient Lightweapon"}
    else:
        desc = {"type": "text", "text": "When this weapon is levitated by the Force to deal damage through a class feature or force power you use, it deals additional damage equal to the damage dice of the weapon.", "title": "Byrothsis Adept Lightweapon"}

    text = {"type": "text", "text": f"{sup.getProperties(attack)}"}

    base_attack = {"name": f"Byrothsis {'Ancient' if args.get('byran') else 'Adept'} Lightweapon - {a.name}", "_v": 2, "automation": [target, desc, text]}

    return dump_json(base_attack)