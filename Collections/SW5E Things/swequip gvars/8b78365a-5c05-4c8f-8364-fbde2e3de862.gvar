# SWEQUIP Main Help Module

ch = character()


def processName(name):
    # What is the base weapon?
    out = name
    out = out.replace("Rapid - ", '').replace("Burst - ", '').replace("Two-Handed ", '').replace(" - Rifle",
                                                                                                 '').replace(" - Staff",
                                                                                                             '').replace(
        "Penetrating - ", '').replace("Corruption - ", "")
    out = out.replace("Acid - ", '').replace("Cold - ", '').replace("Fire - ", '').replace("Lightning - ", '')
    out = out.replace("Acid, ", '').replace("Cold, ", '').replace("Fire, ", '').replace("Lightning, ", '')
    out = out.replace("Rocket, Fragmentation - ", '').replace("Rocket, Incendiary - ", '').replace("Rocket, Ion - ", '')
    out = out.replace("Missile, Fragmentation - ", '').replace("Missile, Incendiary - ", '').replace("Missile, Ion - ",
                                                                                                     '')
    out = out.replace("Projector Canister, Corrosive - ", '').replace("Projector Canister, Cryo - ", '').replace(
        "Projector Canister, Incendiary - ", '')
    out = out.replace("Grapple - ", "")

    out = out.replace("Cooldown - ", "").replace("Reload - ", "")
    out = out.replace("Nano - ", "").replace("Ion Pulse - ", "").replace("Homing - ", "")

    out = stripAmmo(out)

    return out


def baseName(name):
    # What weapon is considered to be the default?
    out = name
    out = out.replace("Rapid - ", '').replace("Burst - ", '').replace("Two-Handed ", '').replace(" - Rifle",
                                                                                                 '').replace(" - Staff",
                                                                                                             '').replace(
        "Penetrating - ", '').replace("Corruption - ", "")
    out = out.replace("Cartridge, Slug - ", "")
    out = out.replace("Arrow - ", "")
    out = out.replace("Dart - ", "")
    out = out.replace("Snare - ", "")
    out = out.replace("Bolt - ", "")
    out = out.replace("Cell, Power - ", "")
    out = out.replace("Acid - ", '').replace("Cold - ", '').replace("Fire - ", '').replace("Lightning - ", '')
    out = out.replace("Acid, ", '').replace("Cold, ", '').replace("Fire, ", '').replace("Lightning, ", '')
    out = out.replace("Rocket, Fragmentation - ", '').replace("Rocket, Incendiary - ", '').replace("Rocket, Ion - ", '')
    out = out.replace("Missile, Fragmentation - ", '').replace("Missile, Incendiary - ", '').replace("Missile, Ion - ",
                                                                                                     '')
    # out = out.replace("Projector Canister, Corrosive - ", '').replace("Projector Canister, Cryo - ", '').replace(
    #     "Projector Canister, Incendiary - ", '')
    out = out.replace("Grapple - ", "")

    out = out.replace("Cooldown - ", "").replace("Reload - ", "")
    out = out.replace("Nano - ", "").replace("Ion Pulse - ", "").replace("Homing - ", "")

    return out


def stripAmmo(name):
    out = name
    out = out.replace("Cartridge, Slug - ", '').replace("Cartridge, Corrosive - ", '').replace(
        "Cartridge, Electrifying - ", '').replace("Cartridge, Gas - ", '')
    out = out.replace("Arrow - ", '').replace("Arrow, Combustive - ", '').replace("Arrow, Electroshock - ", '').replace(
        "Arrow, Noisemaker - ", '')
    out = out.replace("Dart - ", '').replace("Dart, Deafening - ", '').replace("Dart, Electrifying - ", '').replace(
        "Dart, Panic - ", '')
    out = out.replace("Snare - ", "")
    out = out.replace("Bolt - ", '').replace("Bolt, Deafening - ", '').replace("Bolt, Electrifying - ", '').replace(
        "Bolt, Panic - ", '')
    out = out.replace("Cell, Power - ", "").replace("Cell, Cryo - ", '').replace("Cell, Deafening - ", '').replace(
        "Cell, Incendiary - ", '')

    out = out.replace("Adv. - ", "").replace("Adv. Homing - ", "").replace("Homing - ", "")
    out = out.replace("Adv. Proton - ", "").replace("Flechette - ", "").replace("Plasma - ", "").replace("Thermite - ",
                                                                                                         "")
    out = out.replace("Adv. Concussion - ", "").replace("Concussion - ", "").replace("Discord - ", "").replace(
        "Proton - ", "").replace("Silent Thunder - ", "").replace("S-Thread - ", "")

    return out


def updateName(attack, prefix, cupdate=True):
    a = load_json(attack)
    test = attack
    test = test.replace(f'"name": "{a.name}"', f'"name": "{prefix} - {a.name}"')
    if cupdate and "counter" in test:
        index = test.find('"counter": "') + 12
        counter = str(test[index:test[index:].find('"') + index])
        test = test.replace(f'"counter": "{counter}"', f'"counter": "{prefix} - {counter}"')
    return test


def getProperties(attack, lower: int|None =1):
    a = load_json(attack)
    if lower:
        return str(a.automation[len(a.automation) - 2].get("text")).lower() if not a.automation[len(a.automation) - 1].get("text") else str(a.automation[len(a.automation) - 1].get("text")).lower()
    else:
        return str(a.automation[len(a.automation) - 2].get("text")) if not a.automation[len(a.automation) - 1].get("text") else str(a.automation[len(a.automation) - 1].get("text"))


def replaceProperties(attack, str):
    prop = getProperties(attack, None)
    attack = attack.replace(f"{prop}", f"{str}")
    return attack


def get_damage_str(attack):
    a = load_json(attack)
    if 'burst' in a.name.lower():
        dindex = attack.find('"dice": "') + 9
    else:
        dindex = attack.find('"damage": "') + 11

    damage_str = str(attack[dindex:attack[dindex:].find('"') + dindex])
    return damage_str


def get_damage_type(attack_str):
    return str(attack_str[attack_str.find('[') + 1:attack_str.find(']')])


def get_on_hit_effects(attack):
    a = load_json(attack)
    auto = None

    for e in a.automation:
        if e.type == "target":
            for i in e.effects:
                if i.type == "attack":
                    auto = i.hit
                    break

    return auto

def get_on_save_effects(attack):
    a = load_json(attack)
    fail = []
    success = []

    for e in a.automation:
        if e.type == "target":
            for i in e.effects:
                if i.type == "save":
                    fail = i.fail
                    success = i.success
                    break
    return fail,success


def get_attack_bonus(attack):
    index = attack.find('"attackBonus": "') + 16
    return str(attack[index:attack[index:].find('"') + index])

def get_counter(attack):
    a = load_json(attack)

    for e in a.automation:
        if e.type == "counter":
            return e
        elif e.type == "target":
            for i in e.effects:
                if i.type == "counter":
                    return i

    return None

def get_damage_die(attack):
    a = load_json(attack)
    if 'burst' in a.name.lower():
        dindex = attack.find('"dice": "') + 9
    else:
        dindex = attack.find('"damage": "') + 11

    damage_str = str(attack[dindex:attack[dindex:].find('+') + dindex])
    return damage_str

def get_save_dc(attack):
    a = load_json(attack)

    for e in a.automation:
        if e.type == "target":
            for i in e.effects:
                if i.type == "save":
                    return i.dc
    return None


def replace_mod(text):
    stats = ch.stats
    if 'dexterityMod' in text:
        text = text.replace('dexterityMod', f"{stats.get_mod('dex')}")

    if 'strengthMod' in text:
        text = text.replace('strengthMod', f"{stats.get_mod('str')}")

    if 'proficiencyBonus' in text:
        text = text.replace('proficiencyBonus', f"{stats.prof_bonus}")

    if 'max' in text or 'min' in text or '+' in text or '-' in text:
        text = vroll(text).total

    return int(text)

def get_subclasses():
    out = []
    if ch.get_cvar('subclass'):
        classes = load_json(ch.get_cvar('subclass'))
        for c in classes:
            out.append(classes.get(c))

    return out

def get_max_roll(dmg_str):
    parts = dmg_str.split("+")

    total_damage = ""

    for part in parts:
        if '[' in part or ']' in part:
            start = part.index('[')
            part = part[:start].strip()
        if '{' in part or '}' in part:
            total_damage += f"+{part}"
        elif 'd' in part:
            num, size = [int(x) if x else 1 for x in part.split('d')]
            if len(total_damage) > 1:
                total_damage += f"+{num * size}"
            else:
                total_damage += num*size
        else:
            total_damage += f"+{part}"
    return total_damage
