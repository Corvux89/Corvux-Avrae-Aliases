# Power Module
c = character()

def get_subclasses():
    out = []
    if c.get_cvar('subclass'):
        classes = load_json(c.get_cvar('subclass'))
        for c in classes:
            out.append(classes.get(c))

    return out

subclasses = get_subclasses()
feats = load_json(c.get_cvar("SWFeats", "{}"))
fp = load_json(get_gvar("b3458e30-e3ca-4674-970c-adc8987e5b07"))
fp_normal = fp_normal = {key.lower(): key for key in fp.keys()}
tp = load_json(get_gvar("e90cc412-c2ad-4c2f-8e48-8ccc81fb5bf9"))
tp_normal = tp_normal = {key.lower(): key for key in tp.keys()}

def processPower(args):
    a = argparse(args)
    ignore = a.get('i')
    out = []
    point_list = [0,2,3,4,5,6,7,8,9,10]
    keyword = None if not args else args[0].lower()

    if not keyword:
        return "help power"

    # --------------------
    # Find the power
    # --------------------

    spell, cc = get_spell(keyword, out, a)

    # --------------------
    # Validation
    # --------------------
    if spell is None:
        return err("I don't think that's a supported power. Make sure it is spelled correctly or let us know")
    if spell.name not in c.spellbook and spell.name.replace("(SW) ",'').lower() not in c.spellbook and not ignore:
        return err(f"I don't think you know {spell.name.replace('(SW) ', '')}.  Make sure it is added to your spellbook or try to cast it "
                   f"again with `-i` to ignore requirements. If you didn't intend to use {spell.name.replace('(SW) ', '')}, try "
                   f"using quotes around the power name.")

    # --------------------
    # Figure out the cost
    # --------------------
    spell_level = max(a.last('l', default=0, type_=int), spell.level)
    points = point_list[spell_level]

    if a.get('p'):
        points += int(str(a.last('p')).replace('{spell_level}',str(spell_level)))

    # --------------------
    # Pre Cost Processing
    # --------------------

    cc, points, ignore = pre_cost_processing(out, spell, spell_level, cc, points, ignore, args)

    # --------------------
    # Pay the cost
    # --------------------
    if not ignore and not c.cc_exists(cc):
        return err(f"No counter named {cc} found. Either cast with `-i` or run `!swlevel`")
    elif not ignore and c.get_cc(cc) < points:
        return err(f"You don't have enough {cc} to cast that power")
    c.mod_cc(cc, -points) if not ignore else ''
    args.remove(args[0])
    out.append(" ".join(args))
    out.append(f''' -f "{cc} (-{points})|{c.cc_str(cc)}" ''') if not ignore and not a.get('-h') else ''

    # --------------------
    # Post Cost Processing
    # --------------------

    # Scout - Bulwark
    if cc == "Tech Points" and c.cc_exists("Personal Barrier") and not ignore and not a.get('h'):
        c.mod_cc("Personal Barrier", +points)
        out.append(f''' -f "Personal Barrier ({points})|{c.cc_str("Personal Barrier")}" ''')

    # Add DC Bonus unless overriden
    if not a.get('dc'):
        calc_dc = 8 + c.stats.prof_bonus + c.stats.get_mod(f"{'wisdom' if '-with wis' in out else 'charisma'}")
        dc_add = c.spellbook.dc - calc_dc if c.spellbook.dc else None
        if dc_add:
            out.append(f''' -dc +{dc_add}''')

    # Add spell attack bonus
    out.append(f''' -b {c.spellbook.sab - c.spellbook.spell_mod - c.stats.prof_bonus if c.spellbook.sab else ''}''')

    # Troubleshooting
    if a.get('dev'):
        return err(f'cast "{spell.name}" {" ".join(out)} -i \n\n ARGS = {args}')

    # Send it!
    return f'cast "{spell.name}" {" ".join(out)} {"-i" if spell_level>0 else ""}'

def search(keyword, gvar, normal_gvar, a = None):
    keyword = keyword.lower()
    sover = f"(sw) {keyword}"

    normal_key = normal_gvar.get(keyword) or normal_gvar.get(sover)

    if normal_key:
        s = gvar[normal_key]
        return {"name": normal_gvar[normal_key.lower()]} | s

    for key in normal_gvar:
        if keyword in key or sover in key:
            s = {"name": normal_gvar[key]} | gvar[normal_gvar[key]]
            if s.name in c.spellbook or s.name.replace("(SW) ", "") in c.spellbook:
                return s
    return None
   

def getWith(spell):
    var = load_json(c.get_cvar("sw5e", get_svar("sw5e", "{}")))
    ovr = var.get('castMod')

    if ovr:
        return f'-with {ovr}'
    elif "light" in spell.classes.lower():
        return '-with wis'
    elif "dark" in spell.classes.lower():
        return '-with cha'
    elif c.stats.wisdom > c.stats.charisma:
        return '-with wis'
    else:
        return '-with cha'

def get_spell(keyword, out, a):
    ignore = a.get('i')
    wi = a.get('with')
    cc = None

    if c.cc_exists('Force Points') and not c.cc_exists("Tech Points") and not ignore:
        if spell := search(keyword, fp, fp_normal):
            cc = "Force Points"
            if not wi:
                out.append(getWith(spell))

        # Subclasses that allow Tech powers as Force Powers
        elif bool(set(subclasses) & {"Synthesis", "Technology", "Aqinos"}):
            if spell := search(keyword, tp, tp_normal):
                cc = "Force Points"
                spell["classes"] = "Universal"
                if not wi:
                    out.append(getWith(spell))
        elif feats.get("TechDabbler") or c.cc_exists("Technologist's Exploit"):
            if spell := search(keyword, tp, tp_normal):
                cc = "Tech Points"
        else:
            spell = None
    elif c.cc_exists("Tech Points") and not c.cc_exists("Force Points") and not ignore:
        if spell := search(keyword, tp, tp_normal):
            cc = "Tech Points"

        # Subclasses that allow Force powers as Tech Powers
        elif bool(set(subclasses) & {"Artificer", "Inquisitor"}):
            if spell := search(keyword, fp, fp_normal):
                cc = "Tech Points"
        elif feats.get("ForceSensitive"):
            if spell := search(keyword, fp, fp_normal):
                cc = "Force Points"
        else:
            spell = None
    else:
        if spell := search(keyword, fp, fp_normal, a):
            cc = "Force Points"
            if not wi:
                out.append(getWith(spell))
        elif spell := search(keyword, tp, tp_normal, a):
            cc = "Tech Points"
        else:
            spell = None

    return spell, cc

def pre_cost_processing(out, spell, spell_level, cc, points, ignore, args):
    a = argparse(args)

    # Sentinel - Path of Meditation
    if "Meditation" in subclasses and 'base' not in args:
        if spell.name == "(SW) Guidance":
            spell["name"] = "(SW) Sage Counsel - Guidance"
        if spell.name == "Battle Meditation" and c.cc_exists("Unbreakable Focus"):
            if c.get_cc("Unbreakable Focus") and not a.get('p') and not ignore:
                points = 0
                c.mod_cc("Unbreakable Focus", -1)
                out.append(f''' -f "Unbreakable Focus (-1)|{c.cc_str("Unbreakable Focus")}" ''')
            spell["name"] = "Unbreakable Focus - Battle Meditation"
        elif spell.name == "Improved Battle Meditation" and c.cc_exists("Turbulent Presence"):
            if c.get_cc("Turbulent Presence") and not a.get('p') and not ignore:
                points = 0
                c.mod_cc("Turbulent Presence", -1)
                out.append(f''' -f "Turbulent Presence (-1)|{c.cc_str("Turbulent Presence")}" ''')
            spell["name"] = "Turbulent Presence - Improved Battle Meditation"
        elif spell.name == "Master Battle Meditation" and c.cc_exists("Legendary Battle Meditation"):
            if c.get_cc("Legendary Battle Meditation") and not a.get('p') and not ignore:
                points = 0
                c.mod_cc("Legendary Battle Meditation", -1)
                out.append(f''' -f "Legendary Battle Meditation (-1)|{c.cc_str("Legendary Battle Meditation")}" ''')
            spell["name"] = "Legendary Battle Meditation - Master Battle Meditation"

    # Fighter - Adept Specialist
    elif bool(set(subclasses) & {"Adept Light", "Adept Dark"}):
       if spell.name == "Burst of Speed" and c.cc_exists("Growing Momentum"):
           if c.get_cc("Growing Momentum") and not a.get('p') and not ignore:
                points = 0
                c.mod_cc("Growing Momentum", -1)
                out.append(f''' -f "Growing Momentum (-1)|{c.cc_str("Growing Momentum")}" ''')
                spell["name"] = "Growing Momentum - Burst of Speed"

    # Ideal of the Tranquil
    elif c.cc_exists("Tranquil Force Points") and c.get_cc("Tranquil Force Points")>=1:
        tcost = min(c.get_cc("Tranquil Force Points"),points)
        points -= max(tcost,0)
        c.mod_cc("Tranquil Force Points", -tcost)
        out.append(f''' -f "Tranquil Force Points (-{tcost})|{c.cc_str("Tranquil Force Points")}" ''')
        out.append(f''' -f "Ideal of the Tranquil|When you finish a short or long rest, you gain a number of temporary force points equal to half your Wisdom or Charisma modifier (your choice, minimum of one). When you would spend a force point while you have temporary force points, the temporary force points are spent first. All temporary force points are lost at the end of your next short or long rest." ''')

    # Tech Dabbler
    elif feats.get("TechDabbler") and cc == "Tech Points":
        if spell_level == 0:
            ignore = True
            out.append('-with int')
        elif c.cc_exists(f"Tech Dabbler - {spell_level}"):
            out.append('-with int')
            points = 1
            cc = f"Tech Dabbler - {spell_level}"

    # Force-Sensitive
    elif feats.get("ForceSensitive") and cc == "Force Points":
        if spell_level == 0:
            ignore = True
        elif c.cc_exists(f"Force-Sensitive - {spell_level}"):
            points = 1
            cc = f"Force-Sensitive - {spell_level}"

    # Monk Vow of the Devoted
    elif 'devoted' in feats.get('Vows',[]) and cc == "Force Points":
        # Validate for multiclass
        switch = True if not c.cc_exists(cc) or (c.get_cc(cc) and 'focus' in args) else False
        if c.cc_exists("Focus Points") and switch and not ignore:
            cc = f"Focus Points" 
            points = points-1 if points > 0 else 0

    # Operative Technologist's Exploit
    elif c.cc_exists("Technologist's Exploit") and c.get_cc("Technologist's Exploit") > 0 and cc == "Tech Points":
        cc = "Technologist's Exploit"
        out.append(f''' -f "Technologist's Exploit|You learn and can cast one 1st-level tech power once per long rest. Your techcasting ability is Intelligence. You require use of a wristpad for this power.\n\nYou can select this exploit multiple times. Each time you do so, you must choose a different power." ''')
        points = 1

    return cc, points, ignore